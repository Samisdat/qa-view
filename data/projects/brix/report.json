[{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `patternHeader` has a Cognitive Complexity of 42 (exceeds 5 allowed). Consider refactoring.","fingerprint":"879e4de9c95d6bbcacc0aafa9b40bcef","location":{"path":"brix/source/js/pl-header.js","lines":{"begin":48,"end":180}},"other_locations":[],"remediation_points":3850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `patternHeader` has 76 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8f4541cdfe3904b268d5c70b9678897c","location":{"path":"brix/source/js/pl-header.js","lines":{"begin":48,"end":180}},"other_locations":[],"remediation_points":1824000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `program` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"fac19d452daf4165525fbd54a159fb9d","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1122,"end":1122}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `wrapProgram` has 7 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"93dbee6c67ffd1950fd4b5c0a8fa9dee","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1210,"end":1210}},"other_locations":[],"remediation_points":525000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `executeDecorators` has 6 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"176cbd1140dccd4caf050b64c9b6b597","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1301,"end":1301}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `program` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"fac19d452daf4165525fbd54a159fb9d","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2621,"end":2621}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `wrapProgram` has 7 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"93dbee6c67ffd1950fd4b5c0a8fa9dee","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2709,"end":2709}},"other_locations":[],"remediation_points":525000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `executeDecorators` has 6 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"176cbd1140dccd4caf050b64c9b6b597","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2800,"end":2800}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `handlebars.js` has 1932 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"04c69dd7320261a2af6bd5b627ddb6db","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1,"end":3000}},"other_locations":[],"remediation_points":25420800,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Exception` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"430ea05d885c44e0afcfc3213c4e1cbe","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":436,"end":477}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `template` has 137 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"dca70272b37ddfda21fc817fd8e2befc","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1038,"end":1208}},"other_locations":[],"remediation_points":3288000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `invokePartialWrapper` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f12604a1ad998e238d7c260ba77d160f","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1057,"end":1090}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `invokePartial` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"16bd9629815cbcefa8140270dfd73e87","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1249,"end":1287}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Exception` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"430ea05d885c44e0afcfc3213c4e1cbe","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1935,"end":1976}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `template` has 137 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"dca70272b37ddfda21fc817fd8e2befc","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2537,"end":2707}},"other_locations":[],"remediation_points":3288000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `invokePartialWrapper` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f12604a1ad998e238d7c260ba77d160f","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2556,"end":2589}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `invokePartial` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"16bd9629815cbcefa8140270dfd73e87","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2748,"end":2786}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":693,"end":695}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"ed5eb2c221b271017865f19c8b3fd556"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2192,"end":2194}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"ed5eb2c221b271017865f19c8b3fd556"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":396,"end":396}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a6c0485fbc832063189cf774b38cedeb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":612,"end":612}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"c16e0f7d7104c2cb7b433bf1969af759"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1895,"end":1895}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a6c0485fbc832063189cf774b38cedeb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"brix/source/js/handlebars.js","lines":{"begin":2111,"end":2111}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"c16e0f7d7104c2cb7b433bf1969af759"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exports` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e8411aa44848ea26bfa8da30d6f60684","location":{"path":"brix/helpers/contributors.js","lines":{"begin":4,"end":37}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exports` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring.","fingerprint":"3bd233931076abdd1ffcbb053ecdf0be","location":{"path":"brix/helpers/ifCond.js","lines":{"begin":1,"end":50}},"other_locations":[],"remediation_points":2850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exports` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"aa4e6c2e8619eb4e6a45caef3b5e83bb","location":{"path":"brix/helpers/pkg-json-data.js","lines":{"begin":4,"end":55}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"d6b598c5f3db2584e849a2b74bf9eee7","location":{"path":"brix/helpers/pkg-json-data.js","lines":{"begin":4,"end":55}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exports` has a Cognitive Complexity of 66 (exceeds 5 allowed). Consider refactoring.","fingerprint":"c5ae11aaa5693948325dabe863d203a4","location":{"path":"brix/helpers/pattern.js","lines":{"begin":1,"end":250}},"other_locations":[],"remediation_points":6250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 158 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8c4ce52626d8821606c1a5388bd5b839","location":{"path":"brix/helpers/pattern.js","lines":{"begin":1,"end":250}},"other_locations":[],"remediation_points":3792000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `extractPatternShowcaseData` has 106 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"db5da6fdc7339347359f9d52a6b56791","location":{"path":"brix/helpers/pattern.js","lines":{"begin":40,"end":196}},"other_locations":[],"remediation_points":2544000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"brix/helpers/pattern.js","lines":{"begin":36,"end":36}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"982095432def5c1fe3f9886ede39dba9"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 56 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"36cae79010a561ae0d4e1c9ee9794ace","location":{"path":"brix/helpers/uxspec-header.js","lines":{"begin":5,"end":101}},"other_locations":[],"remediation_points":1344000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exports` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring.","fingerprint":"3bcc21ce3a5eda9457ff6d218ec0ae49","location":{"path":"handlebars-helper/jest/ifCond.js","lines":{"begin":1,"end":48}},"other_locations":[],"remediation_points":1850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `copyAllComponentHbsIntoBrix` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"f60802509e02461a2ceb082d6329d992","location":{"path":"scripts/syncHbs.js","lines":{"begin":111,"end":165}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `copyAllComponentHbsIntoBrix` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"50cf65fc423fd778be922176c85f737d","location":{"path":"scripts/syncHbs.js","lines":{"begin":111,"end":165}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `contentToMarkdown` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d30dc0f939baac22f05525546f12ddfd","location":{"path":"packages/design-tokens/tools/generate-overview.js","lines":{"begin":37,"end":72}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `showCookieBadge` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"f77fca50c66096024cbdf7a4e3d14e9c","location":{"path":"brix/source/js/draft-cookie.ts","lines":{"begin":7,"end":38}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `FormValidation` has 205 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"487aea05e7fe1172bcfec46f4a3b8183","location":{"path":"brix/app/60-developer/form-validation/FormValidation.ts","lines":{"begin":13,"end":249}},"other_locations":[],"remediation_points":4920000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `InitStaticVariation` has 164 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"737b4f1d42d8cdc4b22f2e854b8b2f30","location":{"path":"brix/app/60-developer/form-validation/FormValidation.ts","lines":{"begin":20,"end":206}},"other_locations":[],"remediation_points":3936000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `InitToggleVariation` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"065bb55d2fad8bc1c1a959aad862ee59","location":{"path":"brix/app/60-developer/form-validation/FormValidation.ts","lines":{"begin":208,"end":243}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `patternExample` has 46 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"0edc71ea3391b4669e77dd86b1033459","location":{"path":"brix/app/pattern-example.ts","lines":{"begin":7,"end":75}},"other_locations":[],"remediation_points":1104000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `LabeledList` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f2ca3e16caa414345a555b89af825177","location":{"path":"brix/app/10-components/labeled-list/LabeledList.ts","lines":{"begin":8,"end":48}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Input` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a50e07ad3b605a609e1fb055ca208c71","location":{"path":"brix/app/10-components/form-text-input/FormTextInput.ts","lines":{"begin":8,"end":49}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ScaffoldExample` has 40 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"389725306ad24189c4005ca61fa19a59","location":{"path":"brix/app/10-components/_scaffold-example/ScaffoldExample.ts","lines":{"begin":7,"end":74}},"other_locations":[],"remediation_points":960000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `PromoPrice` has 39 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"02ecb9c1bf3ed0105b7495547d5752dd","location":{"path":"brix/app/10-components/promo-price/PromoPrice.ts","lines":{"begin":8,"end":59}},"other_locations":[],"remediation_points":936000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `RibbonBadgeVariations` has 45 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c8e833680d30674efd5ef89f40fbd4a2","location":{"path":"brix/app/10-components/ribbon-badge/RibbonBadge.ts","lines":{"begin":7,"end":62}},"other_locations":[],"remediation_points":1080000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `FormSelectionControl` has 55 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9d2339765c77b5a4ebded2864d786438","location":{"path":"brix/app/10-components/form-selection-control/FormSelectionControl.ts","lines":{"begin":6,"end":73}},"other_locations":[],"remediation_points":1320000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Tooltip` has 87 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"3693e9e599e6a800faa9d5b82e354933","location":{"path":"brix/app/10-components/tooltip/Tooltip.ts","lines":{"begin":8,"end":112}},"other_locations":[],"remediation_points":2088000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Notification` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"54b788d7edcaefa795c68c7afd6085ef","location":{"path":"brix/app/10-components/notification/Notification.ts","lines":{"begin":7,"end":47}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `FormSelect` has 53 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"eb80b624148bf23833b23ca9552fa829","location":{"path":"brix/app/10-components/form-select/FormSelect.ts","lines":{"begin":7,"end":74}},"other_locations":[],"remediation_points":1272000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Overlay` has 45 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"17fc42d4fc93221832f8bdff78c0d735","location":{"path":"brix/app/10-components/overlay/Overlay.ts","lines":{"begin":6,"end":65}},"other_locations":[],"remediation_points":1080000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Label` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"34438ea2ef1dadb2daeffc39baf5ac5f","location":{"path":"brix/app/10-components/form-label/FormLabel.ts","lines":{"begin":8,"end":48}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Kiss` has 35 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"938549003346b817abed46566c66236e","location":{"path":"brix/app/30-module/kiss/Kiss.ts","lines":{"begin":11,"end":66}},"other_locations":[],"remediation_points":840000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `Basket` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"c39a9eb2cf5d1580d735cb480fe414d4","location":{"path":"brix/app/30-module/basket/Basket.ts","lines":{"begin":12,"end":165}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Basket` has 125 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9508d7c3336c2f5be8e52b5bce0fd01b","location":{"path":"brix/app/30-module/basket/Basket.ts","lines":{"begin":12,"end":165}},"other_locations":[],"remediation_points":3000000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `UnorderedVerticalList` has 99 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"e2cd832efe9b9fdc66137f43a1dcd233","location":{"path":"brix/app/20-blocks/unordered-vertical-list/UnorderedVerticalList.ts","lines":{"begin":9,"end":148}},"other_locations":[],"remediation_points":2376000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `createDynamicVariantWithCheckmarks` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5796a84853f9d8dfea4f12d05e662475","location":{"path":"brix/app/20-blocks/unordered-vertical-list/UnorderedVerticalList.ts","lines":{"begin":18,"end":64}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `createDynamicVariantWithIcons` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f977cb1d44f4fad94bc4c32de53f0672","location":{"path":"brix/app/20-blocks/unordered-vertical-list/UnorderedVerticalList.ts","lines":{"begin":69,"end":108}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Tabs` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"fc06189dd5b15038766179c0741c1fb7","location":{"path":"brix/app/20-blocks/tabs/Tabs.ts","lines":{"begin":8,"end":59}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `InputField` has 172 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"440b9e795913d30dcf1c89ec70ebe127","location":{"path":"brix/app/20-blocks/input-field/InputField.ts","lines":{"begin":10,"end":224}},"other_locations":[],"remediation_points":4128000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ButtonTiles` has 41 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f952f136ad5912750763211d1a209bce","location":{"path":"brix/app/20-blocks/button-tiles/ButtonTiles.ts","lines":{"begin":7,"end":63}},"other_locations":[],"remediation_points":984000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ImageGallery` has 35 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"3d3b785eb04d3bf5ed4e57067b3bdebe","location":{"path":"brix/app/20-blocks/image-gallery/ImageGallery.ts","lines":{"begin":11,"end":66}},"other_locations":[],"remediation_points":840000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `HighlightBadge` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.","fingerprint":"92f0cac758387d7fdfc437de123daada","location":{"path":"brix/app/20-blocks/highlight-badge/HighlightBadge.ts","lines":{"begin":12,"end":103}},"other_locations":[],"remediation_points":850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `HighlightBadge` has 68 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9f2a10fad0d7d276a1f2aaf741c6a2af","location":{"path":"brix/app/20-blocks/highlight-badge/HighlightBadge.ts","lines":{"begin":12,"end":103}},"other_locations":[],"remediation_points":1632000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `renderVariations` has 39 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"42b86e88f90d5283d111c73d74247f15","location":{"path":"brix/app/20-blocks/highlight-badge/HighlightBadge.ts","lines":{"begin":42,"end":98}},"other_locations":[],"remediation_points":936000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `MultiPicker` has 59 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"df59bbc30579ea37d6fc86a811addf97","location":{"path":"brix/app/20-blocks/multi-picker/MultiPicker.ts","lines":{"begin":7,"end":85}},"other_locations":[],"remediation_points":1416000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Helpful` has 40 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"da6ecb47ff489fab822f7e0f5125e3f8","location":{"path":"brix/app/20-blocks/helpful/Helpful.ts","lines":{"begin":8,"end":55}},"other_locations":[],"remediation_points":960000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `BasketOffer` has 131 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"6d2c090afa0241c4854b154f5890a40e","location":{"path":"brix/app/20-blocks/basket-offer/BasketOffer.ts","lines":{"begin":9,"end":161}},"other_locations":[],"remediation_points":3144000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `exampleOptionTabs` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring.","fingerprint":"6048993749f1eb8d772641d3e87cd579","location":{"path":"brix/app/20-blocks/option-tabs/ExampleOptionTabs.ts","lines":{"begin":15,"end":252}},"other_locations":[],"remediation_points":1450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exampleOptionTabs` has 175 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"bd0be1b7d998780317c64c6cbf205d06","location":{"path":"brix/app/20-blocks/option-tabs/ExampleOptionTabs.ts","lines":{"begin":15,"end":252}},"other_locations":[],"remediation_points":4200000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getDefaultData` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5c1c89e48b7437d0f2ad6967ecefb696","location":{"path":"brix/app/20-blocks/option-tabs/ExampleOptionTabs.ts","lines":{"begin":28,"end":59}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `renderVariations` has 100 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f773ebb5d2954eb8234a0a69be363121","location":{"path":"brix/app/20-blocks/option-tabs/ExampleOptionTabs.ts","lines":{"begin":116,"end":245}},"other_locations":[],"remediation_points":2400000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `TimelineStepper` has 50 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"e3d9cdba715e8ea5391ccdae5fce1c1f","location":{"path":"brix/app/20-blocks/timeline-stepper/TimelineStepper.ts","lines":{"begin":8,"end":68}},"other_locations":[],"remediation_points":1200000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ActionTile` has 48 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"ba9fe4d03c2af94c1634b4e013b3fdba","location":{"path":"brix/app/20-blocks/action-tile/ActionTile.ts","lines":{"begin":8,"end":69}},"other_locations":[],"remediation_points":1152000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ContactUs` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"901f7a87e3c7c672d287227b11126268","location":{"path":"brix/app/20-blocks/contact-us/ContactUs.ts","lines":{"begin":8,"end":69}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Accordion` has 96 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9ef401f055699d78cd2401bd32a4977e","location":{"path":"brix/app/20-blocks/accordion/Accordion.ts","lines":{"begin":10,"end":133}},"other_locations":[],"remediation_points":2304000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `Feedback` has 40 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a78268af6dacf2ba6b44089916a38b85","location":{"path":"brix/app/20-blocks/feedback/Feedback.ts","lines":{"begin":8,"end":65}},"other_locations":[],"remediation_points":960000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ChatBubbles` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a236b59bebf62411b1c143f31ddb24bc","location":{"path":"brix/app/20-blocks/chat-bubbles/ChatBubbles.ts","lines":{"begin":11,"end":73}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ImageCaptionList` has 61 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"75ee9b474dcc9b2fd957e924ee855d09","location":{"path":"brix/app/20-blocks/image-caption-list/ImageCaptionList.ts","lines":{"begin":9,"end":88}},"other_locations":[],"remediation_points":1464000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `ImageHeader` has 34 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"4469ee5bfd119b1199818345367526bb","location":{"path":"brix/app/20-blocks/image-header/ImageHeader.ts","lines":{"begin":7,"end":48}},"other_locations":[],"remediation_points":816000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `BasketCard` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"7cde17a95241c392c3284ee2c44c929b","location":{"path":"brix/app/20-blocks/basket-card/BasketCard.ts","lines":{"begin":9,"end":174}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `BasketCard` has 127 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5a9b7695ecd20a57d52e8ecb8adfec61","location":{"path":"brix/app/20-blocks/basket-card/BasketCard.ts","lines":{"begin":9,"end":174}},"other_locations":[],"remediation_points":3048000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `UnorderedHorizontalList` has 31 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"32642121d8042c1093c275deabd0bc90","location":{"path":"brix/app/20-blocks/unordered-horizontal-list/UnorderedHorizontalList.ts","lines":{"begin":7,"end":44}},"other_locations":[],"remediation_points":744000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `OptionPicker` has 100 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"2a9cac0c21b2bfdd41be65bd46831600","location":{"path":"brix/app/20-blocks/option-picker/OptionPicker.ts","lines":{"begin":15,"end":135}},"other_locations":[],"remediation_points":2400000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `DevicesList` has 54 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"be9f0194299921468be410ade923bbd4","location":{"path":"brix/app/20-blocks/devices-list/DevicesList.ts","lines":{"begin":9,"end":74}},"other_locations":[],"remediation_points":1296000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `BasketSummary` has 138 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a3815145afcfbf76724befd230a79634","location":{"path":"brix/app/20-blocks/basket-summary/BasketSummary.ts","lines":{"begin":9,"end":162}},"other_locations":[],"remediation_points":3312000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"6e33c9720cc68561c02abed3f643ea33","location":{"path":"packages/unordered-vertical-list/UnorderedVerticalList.ts","lines":{"begin":66,"end":102}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `handlePageLoad` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"fa61385a4e71d18262874639eb3ad8e9","location":{"path":"packages/tabs/Tabs.ts","lines":{"begin":81,"end":98}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `handleInputChange` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.","fingerprint":"b40fb85f9866d2e781e76c0c77b1b9d4","location":{"path":"packages/tabs/Tabs.ts","lines":{"begin":144,"end":170}},"other_locations":[],"remediation_points":950000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getInputProperties` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"603e2e420117c27ae60fd67810414d86","location":{"path":"packages/input-field/InputField.ts","lines":{"begin":121,"end":154}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `InputField.test.ts` has 350 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"7472c53633ddfad322b131b27bd7fc86","location":{"path":"packages/input-field/__tests__/InputField.test.ts","lines":{"begin":1,"end":449}},"other_locations":[],"remediation_points":2640000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `track` has 35 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9b38ab59d05dfb2e7d7400067596fc4f","location":{"path":"packages/dynamic-click-module/DcmTrackingService.ts","lines":{"begin":40,"end":83}},"other_locations":[],"remediation_points":840000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `dcmBehaviourService` has a Cognitive Complexity of 20 (exceeds 5 allowed). Consider refactoring.","fingerprint":"0dcf8ea9095ac0cfbd8cf3062440fb1b","location":{"path":"packages/dynamic-click-module/DcmBehaviourService.ts","lines":{"begin":6,"end":149}},"other_locations":[],"remediation_points":1650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `dcmBehaviourService` has 77 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"19907b620ecd029caddfb0275ce50c89","location":{"path":"packages/dynamic-click-module/DcmBehaviourService.ts","lines":{"begin":6,"end":149}},"other_locations":[],"remediation_points":1848000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"00bc42aff23190aa185a7739a2e28821","location":{"path":"packages/button-tiles/ButtonTiles.ts","lines":{"begin":67,"end":138}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.","fingerprint":"f34e18dc57acec1667e72d2394c6bc69","location":{"path":"packages/button/Button.ts","lines":{"begin":93,"end":181}},"other_locations":[],"remediation_points":650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 73 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"7c8f659c30d83fe3bcba8c895c862e71","location":{"path":"packages/button/Button.ts","lines":{"begin":93,"end":181}},"other_locations":[],"remediation_points":1752000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `Button.test.ts` has 424 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"83d4a638004835c553017784b7f6ae14","location":{"path":"packages/button/__tests__/Button.test.ts","lines":{"begin":1,"end":683}},"other_locations":[],"remediation_points":3705600,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"0ee313298fee3eb749fdaeb4fa4b8587","location":{"path":"packages/promo-price/PromoPrice.ts","lines":{"begin":62,"end":118}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"65add9663e1c8480ba2ae09dcddc40ba","location":{"path":"packages/promo-price/PromoPrice.ts","lines":{"begin":62,"end":118}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `initEvents` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"c0a6e878e4ba7a6996c68309e02d1983","location":{"path":"packages/basket-offer/BasketOffer.ts","lines":{"begin":62,"end":79}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e3ff6f572e38d5cdb85379054ad80d10","location":{"path":"packages/basket-offer/BasketOffer.ts","lines":{"begin":101,"end":175}},"other_locations":[],"remediation_points":1350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 55 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"acaf171d99421b7a737d1eed3b97b53d","location":{"path":"packages/basket-offer/BasketOffer.ts","lines":{"begin":101,"end":175}},"other_locations":[],"remediation_points":1320000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `updateItemsStatesByValue` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"2cef09c0d4d3110b9c71c37b3d5ef093","location":{"path":"packages/option-tabs/OptionTabs.ts","lines":{"begin":193,"end":224}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring.","fingerprint":"63048829e35126740fb06363d386319f","location":{"path":"packages/option-tabs/OptionTabs.ts","lines":{"begin":245,"end":343}},"other_locations":[],"remediation_points":1550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 62 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"541f747abcc935b8c2d9b63521aec29b","location":{"path":"packages/option-tabs/OptionTabs.ts","lines":{"begin":245,"end":343}},"other_locations":[],"remediation_points":1488000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `OptionTabs.test.ts` has 557 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"3adb1b3787537a21a24034743559728d","location":{"path":"packages/option-tabs/__tests__/OptionTabs.test.ts","lines":{"begin":1,"end":839}},"other_locations":[],"remediation_points":5620800,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getItemState` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"9d49f3db2abf4e788519cab3f30dc0cb","location":{"path":"packages/timeline-stepper/TimelineStepper.ts","lines":{"begin":112,"end":126}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 43 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"6f135bc0e562cd82fbf380ef3e223057","location":{"path":"packages/pattern-showcase/PatternShowcase.ts","lines":{"begin":82,"end":139}},"other_locations":[],"remediation_points":1032000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `preFormat` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring.","fingerprint":"2dccd1774c8f3a8242a56415eaa3e037","location":{"path":"packages/pattern-showcase/usageToPrettier.ts","lines":{"begin":53,"end":116}},"other_locations":[],"remediation_points":1550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `preFormat` has 41 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"4b680e3a145524613b83bb29872a1a1b","location":{"path":"packages/pattern-showcase/usageToPrettier.ts","lines":{"begin":53,"end":116}},"other_locations":[],"remediation_points":984000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `propertiesToString` has 30 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c1ade266ae450659ac42098dd1c19bbf","location":{"path":"packages/pattern-showcase/usageToPrettier.ts","lines":{"begin":68,"end":110}},"other_locations":[],"remediation_points":720000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 32 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"dc0be17faa085fa25a70dce2604331c3","location":{"path":"packages/action-tile/ActionTile.ts","lines":{"begin":54,"end":104}},"other_locations":[],"remediation_points":768000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 35 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"0dc905cdd7b14e685fc590572cf51bdc","location":{"path":"packages/form-selection-control/FormSelectionControl.ts","lines":{"begin":60,"end":107}},"other_locations":[],"remediation_points":840000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getMoverPosition` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.","fingerprint":"b7f657b1cc652cee13d10e49914dadd1","location":{"path":"packages/tooltip/Tooltip.ts","lines":{"begin":175,"end":230}},"other_locations":[],"remediation_points":650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getMoverPosition` has 37 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b9dac66bcf93310db9c1d6994cc29157","location":{"path":"packages/tooltip/Tooltip.ts","lines":{"begin":175,"end":230}},"other_locations":[],"remediation_points":888000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `Accordion.ts` has 261 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"39a10c24aaf7cc2335c7d7331997de5f","location":{"path":"packages/accordion/Accordion.ts","lines":{"begin":1,"end":419}},"other_locations":[],"remediation_points":1358400,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"87664d974ec84bf5b599b79caa2e6772","location":{"path":"packages/accordion/Accordion.ts","lines":{"begin":333,"end":401}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 50 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c9d9ea073c81e141fb119f9d470cbc34","location":{"path":"packages/accordion/Accordion.ts","lines":{"begin":333,"end":401}},"other_locations":[],"remediation_points":1200000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `Accordion.test.ts` has 294 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"453a779d35a7f348c590f8156b684ce7","location":{"path":"packages/accordion/__tests__/Accordion.test.ts","lines":{"begin":1,"end":402}},"other_locations":[],"remediation_points":1833600,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 32 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"adbbb8b06128b0cc00dbbc7b0a3789e8","location":{"path":"packages/feedback/Feedback.ts","lines":{"begin":111,"end":146}},"other_locations":[],"remediation_points":768000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"fe429811c7cf97ec233a8cbd72093ac3","location":{"path":"packages/image-caption-list/ImageCaptionList.ts","lines":{"begin":97,"end":138}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"ba66dc6b7c9867094a5198eef886d29c","location":{"path":"packages/image-header/ImageHeader.ts","lines":{"begin":72,"end":155}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 61 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b5d28d02fa7505e6fa91a9197b8ed5a1","location":{"path":"packages/image-header/ImageHeader.ts","lines":{"begin":72,"end":155}},"other_locations":[],"remediation_points":1464000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"4cc013412a9189ba1244369755eefef8","location":{"path":"packages/form-select/FormSelect.ts","lines":{"begin":68,"end":102}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `writeDom` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"0100cb56518a3402669af156406dd5b6","location":{"path":"packages/basket-card/BasketCard.ts","lines":{"begin":53,"end":92}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `formFieldsHandler` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"b54ff433248d90ebf50cf2a2114f6469","location":{"path":"packages/core/services/validation/base/formFieldsHandler.ts","lines":{"begin":14,"end":52}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `formFieldsHandler` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"ef8d836c11a6693e994fffec50d1416f","location":{"path":"packages/core/services/validation/base/formFieldsHandler.ts","lines":{"begin":14,"end":52}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `validateFormField` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d59bbe0d1afece30f273fce21786c831","location":{"path":"packages/core/services/validation/base/validateFormField.ts","lines":{"begin":9,"end":40}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `required` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"41f9767d827fcf7042930c50154e02b4","location":{"path":"packages/core/services/validation/validators/required.ts","lines":{"begin":9,"end":36}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mobileNumberStrict` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"5fc16001fd533d05ccb6f0847667d27c","location":{"path":"packages/core/services/validation/validators/mobileNumberStrict.ts","lines":{"begin":12,"end":87}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `mobileNumberStrict` has 62 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"85eeb87111964ee24f710a0db7e59bd2","location":{"path":"packages/core/services/validation/validators/mobileNumberStrict.ts","lines":{"begin":12,"end":87}},"other_locations":[],"remediation_points":1488000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.","fingerprint":"09925ae170e9adaba64706dc4a364c62","location":{"path":"packages/unordered-horizontal-list/UnorderedHorizontalList.ts","lines":{"begin":56,"end":94}},"other_locations":[],"remediation_points":850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 29 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"f17ca90d4cb0820a84e5477125b060d0","location":{"path":"packages/unordered-horizontal-list/UnorderedHorizontalList.ts","lines":{"begin":56,"end":94}},"other_locations":[],"remediation_points":696000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `readDom` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring.","fingerprint":"f15799183a5ab0dba4d39858d33c47ef","location":{"path":"packages/option-picker/OptionPicker.ts","lines":{"begin":83,"end":173}},"other_locations":[],"remediation_points":1250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `readDom` has 74 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5684660041dd10429be02ac7d923316f","location":{"path":"packages/option-picker/OptionPicker.ts","lines":{"begin":83,"end":173}},"other_locations":[],"remediation_points":1776000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `interactionBarShareViaClipboardService` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"56bd2307e42948028b323c44d716c3de","location":{"path":"packages/interaction-bar/interactionBarShareViaClipboardService.ts","lines":{"begin":32,"end":77}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `initEvents` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"de6656a2e34a0feef04dbe3189f7fa74","location":{"path":"packages/interaction-bar/InteractionBar.ts","lines":{"begin":44,"end":75}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/source/js/handlebars.js","lines":{"begin":27,"end":1499}},"remediation_points":329010000,"other_locations":[{"path":"brix/source/js/handlebars.js","lines":{"begin":1526,"end":2998}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 11002**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"702d5502e940f50904766a124c093a01","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/source/js/handlebars.js","lines":{"begin":1526,"end":2998}},"remediation_points":329010000,"other_locations":[{"path":"brix/source/js/handlebars.js","lines":{"begin":27,"end":1499}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 11002**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"702d5502e940f50904766a124c093a01","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/ifCond.js","lines":{"begin":1,"end":50}},"remediation_points":9420000,"other_locations":[{"path":"handlebars-helper/rollup/ifCond.js","lines":{"begin":1,"end":50}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 349**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c76e9f0cb864aba5ea2bbe850c5f46ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"handlebars-helper/rollup/ifCond.js","lines":{"begin":1,"end":50}},"remediation_points":9420000,"other_locations":[{"path":"brix/helpers/ifCond.js","lines":{"begin":1,"end":50}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 349**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"52b44349aec6621ca03349a7399eafc7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"rollup.config.js","lines":{"begin":105,"end":116}},"remediation_points":1020000,"other_locations":[{"path":"brix-rollup.config.js","lines":{"begin":87,"end":98}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 69**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"999cb125a241a88a49d1c07fec23eb2d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix-rollup.config.js","lines":{"begin":87,"end":98}},"remediation_points":1020000,"other_locations":[{"path":"rollup.config.js","lines":{"begin":105,"end":116}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 69**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f8a6ec4206cc19399797733427f4136a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/limit.js","lines":{"begin":1,"end":25}},"remediation_points":750000,"other_locations":[{"path":"handlebars-helper/rollup/limit.js","lines":{"begin":1,"end":25}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b0043e904c73d0cb600a9952a97d5f07","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"handlebars-helper/rollup/limit.js","lines":{"begin":1,"end":25}},"remediation_points":750000,"other_locations":[{"path":"brix/helpers/limit.js","lines":{"begin":1,"end":25}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3328ef60d91ffe048a39cfb30430bf6b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":154,"end":158}},"remediation_points":810000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":160,"end":164}},{"path":"brix/helpers/pattern.js","lines":{"begin":166,"end":170}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9bb0664653468ab6adc8c1b14ea440d6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":160,"end":164}},"remediation_points":810000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":154,"end":158}},{"path":"brix/helpers/pattern.js","lines":{"begin":166,"end":170}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9bb0664653468ab6adc8c1b14ea440d6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":166,"end":170}},"remediation_points":810000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":154,"end":158}},{"path":"brix/helpers/pattern.js","lines":{"begin":160,"end":164}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9bb0664653468ab6adc8c1b14ea440d6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":71,"end":73}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":75,"end":77}},{"path":"brix/helpers/pattern.js","lines":{"begin":79,"end":81}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fe1c027cb16fc5aac0f21f4b76f95c3f","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":75,"end":77}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":71,"end":73}},{"path":"brix/helpers/pattern.js","lines":{"begin":79,"end":81}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fe1c027cb16fc5aac0f21f4b76f95c3f","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":79,"end":81}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":71,"end":73}},{"path":"brix/helpers/pattern.js","lines":{"begin":75,"end":77}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fe1c027cb16fc5aac0f21f4b76f95c3f","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/source/js/pl-header.js","lines":{"begin":100,"end":119}},"remediation_points":780000,"other_locations":[{"path":"brix/source/js/pl-header.js","lines":{"begin":110,"end":119}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5ec6b1ee39bade7f827cbce079a98920","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/source/js/pl-header.js","lines":{"begin":110,"end":119}},"remediation_points":780000,"other_locations":[{"path":"brix/source/js/pl-header.js","lines":{"begin":100,"end":119}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5ec6b1ee39bade7f827cbce079a98920","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/leadingZero.js","lines":{"begin":1,"end":26}},"remediation_points":450000,"other_locations":[{"path":"handlebars-helper/rollup/leadingZero.js","lines":{"begin":1,"end":29}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0dec05934493e7e88f2380d9eb0e2f09","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"handlebars-helper/rollup/leadingZero.js","lines":{"begin":1,"end":29}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/leadingZero.js","lines":{"begin":1,"end":26}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7ec7adcce0bac7c3a0a7ce50670be921","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":121,"end":124}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":130,"end":133}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fe1c027cb16fc5aac0f21f4b76f95c3f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":130,"end":133}},"remediation_points":450000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":121,"end":124}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fe1c027cb16fc5aac0f21f4b76f95c3f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":141,"end":146}},"remediation_points":360000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":148,"end":150}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9d054d04c1bcb325b5d56fdfafae6b7d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":148,"end":150}},"remediation_points":360000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":141,"end":146}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9d054d04c1bcb325b5d56fdfafae6b7d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":230,"end":236}},"remediation_points":360000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":238,"end":244}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9d054d04c1bcb325b5d56fdfafae6b7d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"brix/helpers/pattern.js","lines":{"begin":238,"end":244}},"remediation_points":360000,"other_locations":[{"path":"brix/helpers/pattern.js","lines":{"begin":230,"end":236}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9d054d04c1bcb325b5d56fdfafae6b7d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/styleguide/css/styleguide-specific.css","positions":{"begin":{"line":10,"column":1},"end":{"line":10,"column":1}}},"engine_name":"csslint","fingerprint":"a23879fa011ea213978009039a4e3dcd","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/styleguide/css/styleguide-specific.css","positions":{"begin":{"line":28,"column":1},"end":{"line":28,"column":1}}},"engine_name":"csslint","fingerprint":"a23879fa011ea213978009039a4e3dcd","severity":"minor"},{"type":"issue","check_name":"compatible-vendor-prefixes","description":"The property -moz-box-flex is compatible with -webkit-box-flex and should be included as well.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/styleguide/css/styleguide-specific.css","positions":{"begin":{"line":29,"column":3},"end":{"line":29,"column":3}}},"engine_name":"csslint","fingerprint":"3c61a01bfc76d101dde59c4e69d5b01a","severity":"minor"},{"type":"issue","check_name":"compatible-vendor-prefixes","description":"The property -ms-box-flex is compatible with -webkit-box-flex and should be included as well.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/styleguide/css/styleguide-specific.css","positions":{"begin":{"line":29,"column":3},"end":{"line":29,"column":3}}},"engine_name":"csslint","fingerprint":"3c61a01bfc76d101dde59c4e69d5b01a","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/styleguide/css/styleguide-specific.css","positions":{"begin":{"line":40,"column":1},"end":{"line":40,"column":1}}},"engine_name":"csslint","fingerprint":"a23879fa011ea213978009039a4e3dcd","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":3,"column":1},"end":{"line":3,"column":1}}},"engine_name":"csslint","fingerprint":"94db27684a7401fbd7a85a403cc46314","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":4,"column":5},"end":{"line":4,"column":5}}},"engine_name":"csslint","fingerprint":"9ef49f76bad8af1bb9eb570603bb2bc4","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":5,"column":5},"end":{"line":5,"column":5}}},"engine_name":"csslint","fingerprint":"4451a4d3a8b141fae39857b783eabb56","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (body.with-pattern-showcase) is overqualified, just use .with-pattern-showcase without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":8,"column":1},"end":{"line":8,"column":1}}},"engine_name":"csslint","fingerprint":"3c29560d0c84b36a3dbad3e1ca9f8705","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":9,"column":5},"end":{"line":9,"column":5}}},"engine_name":"csslint","fingerprint":"4451a4d3a8b141fae39857b783eabb56","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":12,"column":5},"end":{"line":12,"column":5}}},"engine_name":"csslint","fingerprint":"6971fd4e6ba9904994f339c004d6a994","severity":"minor"},{"type":"issue","check_name":"universal-selector","description":"The universal selector (*) is known to be slow.","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":20,"column":20},"end":{"line":20,"column":20}}},"engine_name":"csslint","fingerprint":"1a16d57a401e10773fd4f3a06556b5be","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":20,"column":1},"end":{"line":20,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":27,"column":1},"end":{"line":27,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"known-properties","description":"Unknown property 'grid-gap'.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":30,"column":5},"end":{"line":30,"column":5}}},"engine_name":"csslint","fingerprint":"0e8ae2edc4841b8cab5deb6b0bfa05e3","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":30,"column":5},"end":{"line":30,"column":5}}},"engine_name":"csslint","fingerprint":"e5fa37b56f68d7181c2f27578c9f2076","severity":"minor"},{"type":"issue","check_name":"errors","description":"Expected RBRACE at line 31, col 59.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":31,"column":59},"end":{"line":31,"column":59}}},"engine_name":"csslint","fingerprint":"d9fefef8285445a4851ea9cc44e044b8","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":34,"column":1},"end":{"line":34,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"known-properties","description":"Unknown property 'tr'.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":51,"column":5},"end":{"line":51,"column":5}}},"engine_name":"csslint","fingerprint":"60c29f9a89694a1d3ec2b71afdffc315","severity":"minor"},{"type":"issue","check_name":"errors","description":"Expected RBRACE at line 51, col 18.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":51,"column":18},"end":{"line":51,"column":18}}},"engine_name":"csslint","fingerprint":"105f4f3ab22f0902ddd924739bc2a466","severity":"minor"},{"type":"issue","check_name":"errors","description":"Unexpected token '}' at line 54, col 1.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":54,"column":1},"end":{"line":54,"column":1}}},"engine_name":"csslint","fingerprint":"83d2b055f46086257730065a00d32fc9","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":56,"column":1},"end":{"line":56,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":62,"column":1},"end":{"line":62,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"box-model","description":"Using width with padding can sometimes make elements larger than you expect.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":66,"column":5},"end":{"line":66,"column":5}}},"engine_name":"csslint","fingerprint":"2885db711cf698c777670ba5efebee41","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":69,"column":1},"end":{"line":69,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":75,"column":1},"end":{"line":75,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":84,"column":1},"end":{"line":84,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":93,"column":1},"end":{"line":93,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"errors","description":"Expected RBRACE at line 97, col 5.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":97,"column":5},"end":{"line":97,"column":5}}},"engine_name":"csslint","fingerprint":"5b15e473bfea2179a1ad493cef962fdb","severity":"minor"},{"type":"issue","check_name":"errors","description":"Unexpected token '}' at line 102, col 1.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":102,"column":1},"end":{"line":102,"column":1}}},"engine_name":"csslint","fingerprint":"83d2b055f46086257730065a00d32fc9","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":104,"column":1},"end":{"line":104,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":117,"column":1},"end":{"line":117,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":134,"column":1},"end":{"line":134,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":137,"column":5},"end":{"line":137,"column":5}}},"engine_name":"csslint","fingerprint":"9ef49f76bad8af1bb9eb570603bb2bc4","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":147,"column":1},"end":{"line":147,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":153,"column":1},"end":{"line":153,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"text-indent","description":"Negative text-indent doesn't work well with RTL. If you use text-indent for image replacement explicitly set direction for that item to ltr.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":155,"column":5},"end":{"line":155,"column":5}}},"engine_name":"csslint","fingerprint":"1c0927a956e5cf88cc1cac258e64264e","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":164,"column":1},"end":{"line":164,"column":1}}},"engine_name":"csslint","fingerprint":"4464087cea66dee5cdb255cceaeeb032","severity":"minor"},{"type":"issue","check_name":"ids","description":"Don't use IDs in selectors.","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":189,"column":1},"end":{"line":189,"column":1}}},"engine_name":"csslint","fingerprint":"be124aa2086d5f1a0aad2a6244078d83","severity":"minor"},{"type":"issue","check_name":"ids","description":"Don't use IDs in selectors.","categories":["Complexity"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":192,"column":1},"end":{"line":192,"column":1}}},"engine_name":"csslint","fingerprint":"be124aa2086d5f1a0aad2a6244078d83","severity":"minor"},{"type":"issue","check_name":"empty-rules","description":"Rule is empty.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/pattern-scaffolding.css","positions":{"begin":{"line":197,"column":1},"end":{"line":197,"column":1}}},"engine_name":"csslint","fingerprint":"e886dfa2ef217e1835bc502e18351de6","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":9,"column":5},"end":{"line":9,"column":5}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":9,"column":1},"end":{"line":9,"column":1}}},"engine_name":"csslint","fingerprint":"e792040c878d7e7415f7ea4e59fd46dc","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":10,"column":4},"end":{"line":10,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"compatible-vendor-prefixes","description":"The property -epub-hyphens is compatible with -moz-hyphens and should be included as well.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":28,"column":2},"end":{"line":28,"column":2}}},"engine_name":"csslint","fingerprint":"fd1dcd593d877932cdd8ea5115724626","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":33,"column":4},"end":{"line":33,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":33,"column":45},"end":{"line":33,"column":45}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":33,"column":1},"end":{"line":33,"column":1}}},"engine_name":"csslint","fingerprint":"203e1ee644bb1fcc54bf003e215d98fd","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":34,"column":47},"end":{"line":34,"column":47}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":34,"column":5},"end":{"line":34,"column":5}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":39,"column":4},"end":{"line":39,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":39,"column":1},"end":{"line":39,"column":1}}},"engine_name":"csslint","fingerprint":"203e1ee644bb1fcc54bf003e215d98fd","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":39,"column":40},"end":{"line":39,"column":40}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":40,"column":5},"end":{"line":40,"column":5}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":40,"column":42},"end":{"line":40,"column":42}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":46,"column":6},"end":{"line":46,"column":6}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":47,"column":5},"end":{"line":47,"column":5}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":53,"column":4},"end":{"line":53,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":53,"column":1},"end":{"line":53,"column":1}}},"engine_name":"csslint","fingerprint":"203e1ee644bb1fcc54bf003e215d98fd","severity":"minor"},{"type":"issue","check_name":"zero-units","description":"Values of 0 shouldn't have units specified.","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":54,"column":15},"end":{"line":54,"column":15}}},"engine_name":"csslint","fingerprint":"97aad54a4085994bb6e25a97aa14a1a9","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":59,"column":17},"end":{"line":59,"column":17}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":60,"column":4},"end":{"line":60,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":65,"column":17},"end":{"line":65,"column":17}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":65,"column":1},"end":{"line":65,"column":1}}},"engine_name":"csslint","fingerprint":"354ac92557bc6db8784772a1f1c68f0a","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.comment","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":71,"column":1},"end":{"line":71,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.prolog","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":72,"column":1},"end":{"line":72,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.doctype","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":73,"column":1},"end":{"line":73,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cdata","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":74,"column":1},"end":{"line":74,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.punctuation","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":78,"column":1},"end":{"line":78,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.namespace","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":82,"column":1},"end":{"line":82,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.property","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":86,"column":1},"end":{"line":86,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tag","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":87,"column":1},"end":{"line":87,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.boolean","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":88,"column":1},"end":{"line":88,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.number","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":89,"column":1},"end":{"line":89,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.constant","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":90,"column":1},"end":{"line":90,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.symbol","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":91,"column":1},"end":{"line":91,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.deleted","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":92,"column":1},"end":{"line":92,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.selector","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":96,"column":1},"end":{"line":96,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.attr-name","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":97,"column":1},"end":{"line":97,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.string","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":98,"column":1},"end":{"line":98,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.char","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":99,"column":1},"end":{"line":99,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.builtin","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":100,"column":1},"end":{"line":100,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.inserted","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":101,"column":1},"end":{"line":101,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.operator","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":105,"column":1},"end":{"line":105,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":105,"column":1},"end":{"line":105,"column":1}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.entity","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":106,"column":1},"end":{"line":106,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.url","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":107,"column":1},"end":{"line":107,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .language-css   .token.string","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":108,"column":15},"end":{"line":108,"column":15}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .style   .token.string","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":109,"column":8},"end":{"line":109,"column":8}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback background (hex or RGB) should precede HSLA background.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":111,"column":2},"end":{"line":111,"column":2}}},"engine_name":"csslint","fingerprint":"d52c32da1be957f9f23b542545eae930","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.atrule","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":114,"column":1},"end":{"line":114,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.attr-value","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":115,"column":1},"end":{"line":115,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.keyword","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":116,"column":1},"end":{"line":116,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.function","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":120,"column":1},"end":{"line":120,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.class-name","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":121,"column":1},"end":{"line":121,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.regex","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":125,"column":1},"end":{"line":125,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.important","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":126,"column":1},"end":{"line":126,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.variable","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":127,"column":1},"end":{"line":127,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.important","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":131,"column":1},"end":{"line":131,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.bold","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":132,"column":1},"end":{"line":132,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.italic","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":135,"column":1},"end":{"line":135,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.entity","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":139,"column":1},"end":{"line":139,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":143,"column":1},"end":{"line":143,"column":1}}},"engine_name":"csslint","fingerprint":"203e1ee644bb1fcc54bf003e215d98fd","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":148,"column":1},"end":{"line":148,"column":1}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"known-properties","description":"Expected end of value but found '0'.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":152,"column":2},"end":{"line":152,"column":2}}},"engine_name":"csslint","fingerprint":"07f38eda3428af1eac3f035a2b510ee2","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback background (hex or RGB) should precede HSLA background.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":155,"column":2},"end":{"line":155,"column":2}}},"engine_name":"csslint","fingerprint":"d52c32da1be957f9f23b542545eae930","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":164,"column":2},"end":{"line":164,"column":2}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback background-color (hex or RGB) should precede HSLA background-color.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":172,"column":3},"end":{"line":172,"column":3}}},"engine_name":"csslint","fingerprint":"d52c32da1be957f9f23b542545eae930","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback color (hex or RGB) should precede HSL color.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":173,"column":3},"end":{"line":173,"column":3}}},"engine_name":"csslint","fingerprint":"33a7d6dc0c7d367fe8f27f0977a95c56","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":182,"column":2},"end":{"line":182,"column":2}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":193,"column":4},"end":{"line":193,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":193,"column":1},"end":{"line":193,"column":1}}},"engine_name":"csslint","fingerprint":"203e1ee644bb1fcc54bf003e215d98fd","severity":"minor"},{"type":"issue","check_name":"regex-selectors","description":"Attribute selectors with *= are slow!","categories":["Performance"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":199,"column":4},"end":{"line":199,"column":4}}},"engine_name":"csslint","fingerprint":"ac4e0dcaf81f6384fe576e33c50cf5a7","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":204,"column":1},"end":{"line":204,"column":1}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"box-model","description":"Using width with border-right can sometimes make elements larger than you expect.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":212,"column":2},"end":{"line":212,"column":2}}},"engine_name":"csslint","fingerprint":"82a05f90dba60e6a76c62a38662dc764","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":221,"column":2},"end":{"line":221,"column":2}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":227,"column":3},"end":{"line":227,"column":3}}},"engine_name":"csslint","fingerprint":"afb1f7c17cf3921e0ec7ab05c2c56337","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":235,"column":1},"end":{"line":235,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":235,"column":1},"end":{"line":235,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cr","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":236,"column":1},"end":{"line":236,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.lf","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":237,"column":1},"end":{"line":237,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.space","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":238,"column":1},"end":{"line":238,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":242,"column":1},"end":{"line":242,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":242,"column":1},"end":{"line":242,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":242,"column":1},"end":{"line":242,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cr:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":243,"column":1},"end":{"line":243,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cr:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":243,"column":1},"end":{"line":243,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.lf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":244,"column":1},"end":{"line":244,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.lf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":244,"column":1},"end":{"line":244,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.space:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":245,"column":1},"end":{"line":245,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.space:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":245,"column":1},"end":{"line":245,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":251,"column":1},"end":{"line":251,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":251,"column":1},"end":{"line":251,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.tab:not(:empty):before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":251,"column":1},"end":{"line":251,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cr:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":255,"column":1},"end":{"line":255,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.cr:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":255,"column":1},"end":{"line":255,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.crlf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":259,"column":1},"end":{"line":259,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.crlf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":259,"column":1},"end":{"line":259,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.lf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":262,"column":1},"end":{"line":262,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.lf:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":262,"column":1},"end":{"line":262,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.space:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":266,"column":1},"end":{"line":266,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .token.space:before","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":266,"column":1},"end":{"line":266,"column":1}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":274,"column":1},"end":{"line":274,"column":1}}},"engine_name":"csslint","fingerprint":"7600cf17a474100d4f1ca473d95a2c6b","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":313,"column":1},"end":{"line":313,"column":1}}},"engine_name":"csslint","fingerprint":"7600cf17a474100d4f1ca473d95a2c6b","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre.diff-highlight > code   .token.deleted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":369,"column":27},"end":{"line":369,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre.diff-highlight > code   .token.deleted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":369,"column":27},"end":{"line":369,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre > code.diff-highlight   .token.deleted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":370,"column":27},"end":{"line":370,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre > code.diff-highlight   .token.deleted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":370,"column":27},"end":{"line":370,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback background-color (hex or RGB) should precede RGBA background-color.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":371,"column":2},"end":{"line":371,"column":2}}},"engine_name":"csslint","fingerprint":"d52c32da1be957f9f23b542545eae930","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre.diff-highlight > code   .token.inserted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":376,"column":27},"end":{"line":376,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre.diff-highlight > code   .token.inserted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":376,"column":27},"end":{"line":376,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre > code.diff-highlight   .token.inserted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":377,"column":27},"end":{"line":377,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: pre > code.diff-highlight   .token.inserted:not(.prefix)","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":377,"column":27},"end":{"line":377,"column":27}}},"engine_name":"csslint","fingerprint":"6461a9fabe8b2822f8b00ba6433ec5e6","severity":"minor"},{"type":"issue","check_name":"fallback-colors","description":"Fallback background-color (hex or RGB) should precede RGBA background-color.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"brix/source/css/prism.css","positions":{"begin":{"line":378,"column":2},"end":{"line":378,"column":2}}},"engine_name":"csslint","fingerprint":"d52c32da1be957f9f23b542545eae930","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":27,"column":1},"end":{"line":27,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":37,"column":21},"end":{"line":37,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unexpected-multiline","description":"Unexpected newline between function and ( of function call.","content":{"body":"# disallow confusing multiline expressions (no-unexpected-multiline)\n\nSemicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the [semi](./semi.md) rule.\n\nThe rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, **except** where one of the following is true:\n\n* The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n* The line is `--` or `++` (in which case it will decrement/increment the next token.)\n* It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n* The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\nIn the exceptions where a newline does **not** end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.\n\n## Rule Details\n\nThis rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar\n(1 || 2).baz();\n\nvar hello = 'world'\n[1, 2, 3].forEach(addNumber);\n\nlet x = function() {}\n`hello`\n\nlet x = function() {}\nx\n`hello`\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar;\n(1 || 2).baz();\n\nvar foo = bar\n;(1 || 2).baz()\n\nvar hello = 'world';\n[1, 2, 3].forEach(addNumber);\n\nvar hello = 'world'\nvoid [1, 2, 3].forEach(addNumber);\n\nlet x = function() {};\n`hello`\n\nlet tag = function() {}\ntag `hello`\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are confident that you will not accidentally introduce code like this.\n\nNote that the patterns considered problems are **not** flagged by the [semi](semi.md) rule.\n\n## Related Rules\n\n* [func-call-spacing](func-call-spacing.md)\n* [semi](semi.md)\n* [space-unary-ops](space-unary-ops.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":79,"column":14},"end":{"line":79,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"e7adbdedae01fd5247eecbe56cefae45","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":158,"column":25},"end":{"line":158,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":158,"column":29},"end":{"line":158,"column":29}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":381,"column":32},"end":{"line":381,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"3b41e02322ca07cce69535a6a7131d28","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":381,"column":39},"end":{"line":381,"column":39}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'Exception' has a complexity of 7.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":436,"column":13},"end":{"line":436,"column":13}}},"remediation_points":1070000,"fingerprint":"de90ebceecbb717477ce56ac006e087f","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'line' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":438,"column":21},"end":{"line":438,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65a92149e57674c4e3172d2bf79a1f50","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'column' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":439,"column":21},"end":{"line":439,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a478daebffe5e2002d15a0b5bb4e6d16","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 8.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":587,"column":63},"end":{"line":587,"column":63}}},"remediation_points":1140000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":593,"column":53},"end":{"line":593,"column":53}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"3315da7e480fa5a08c88ac7e703adf4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":593,"column":61},"end":{"line":593,"column":61}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 14.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":636,"column":49},"end":{"line":636,"column":49}}},"remediation_points":1560000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'data' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":645,"column":25},"end":{"line":645,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f197a77b101fd0fdb3bf597c1be2409","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'contextPath' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":646,"column":25},"end":{"line":646,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a478daebffe5e2002d15a0b5bb4e6d16","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'priorKey' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":686,"column":33},"end":{"line":686,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"993e0f9da91638922dd67b6475a5acbc","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":794,"column":25},"end":{"line":794,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":794,"column":44},"end":{"line":794,"column":44}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":796,"column":48},"end":{"line":796,"column":48}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":796,"column":67},"end":{"line":796,"column":67}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-useless-concat","description":"Unexpected string concatenation of literals.","content":{"body":"# Disallow unnecessary concatenation of strings (no-useless-concat)\n\nIt's unnecessary to concatenate two strings together, such as:\n\n```js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn't important and the code can be rewritten as:\n\n```js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\n// these are the same as \"10\"\nvar a = `some` + `string`;\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1031,"column":144},"end":{"line":1031,"column":144}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"228787cac852a7bfcff7de5194528dda","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-useless-concat","description":"Unexpected string concatenation of literals.","content":{"body":"# Disallow unnecessary concatenation of strings (no-useless-concat)\n\nIt's unnecessary to concatenate two strings together, such as:\n\n```js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn't important and the code can be rewritten as:\n\n```js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\n// these are the same as \"10\"\nvar a = `some` + `string`;\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1034,"column":143},"end":{"line":1034,"column":143}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"228787cac852a7bfcff7de5194528dda","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'invokePartialWrapper' has a complexity of 8.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1057,"column":17},"end":{"line":1057,"column":17}}},"remediation_points":1140000,"fingerprint":"73c127bd683757491570071527579e71","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1070,"column":25},"end":{"line":1070,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c0f4982240a91a11e40ed9a763604d26","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1070,"column":32},"end":{"line":1070,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1074,"column":25},"end":{"line":1074,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c0f4982240a91a11e40ed9a763604d26","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1074,"column":32},"end":{"line":1074,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1103,"column":46},"end":{"line":1103,"column":46}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eba719638b1b2606ba827d8030629c7c","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1103,"column":62},"end":{"line":1103,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'ret' has a complexity of 9.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1146,"column":17},"end":{"line":1146,"column":17}}},"remediation_points":1210000,"fingerprint":"28b47d31aee042546485fdc40bfc45ee","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'depths' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1155,"column":25},"end":{"line":1155,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f197a77b101fd0fdb3bf597c1be2409","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1159,"column":46},"end":{"line":1159,"column":46}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-func-assign","description":"'main' is a function.","content":{"body":"# disallow reassigning `function` declarations (no-func-assign)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n```js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction foo() {\n    foo = bar;\n}\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction foo(foo) { // `foo` is shadowed.\n    foo = bar;\n}\n\nfunction foo() {\n    var foo = bar;  // `foo` is shadowed.\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1168,"column":21},"end":{"line":1168,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1b1cf2d9da1614d00fc7c2d89f4a398d","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1215,"column":43},"end":{"line":1215,"column":43}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-func-assign","description":"'prog' is a function.","content":{"body":"# disallow reassigning `function` declarations (no-func-assign)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n```js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction foo() {\n    foo = bar;\n}\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction foo(foo) { // `foo` is shadowed.\n    foo = bar;\n}\n\nfunction foo() {\n    var foo = bar;  // `foo` is shadowed.\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1222,"column":17},"end":{"line":1222,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"990f790d9abc3d390d0311381d7e445a","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'invokePartial' has a complexity of 7.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1249,"column":13},"end":{"line":1249,"column":13}}},"remediation_points":1070000,"fingerprint":"d52e37decf733e5b590c20acab2bc743","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'partialBlock' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1257,"column":21},"end":{"line":1257,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"993e0f9da91638922dd67b6475a5acbc","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1259,"column":21},"end":{"line":1259,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 16.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1368,"column":27},"end":{"line":1368,"column":27}}},"remediation_points":1700000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"guard-for-in","description":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","content":{"body":"# Require Guarding for-in (guard-for-in)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n```js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](no-prototype-builtins.md).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n* [no-prototype-builtins](no-prototype-builtins.md)\n\n## Further Reading\n\n* [Exploring JavaScript for-in loops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n* [The pitfalls of using objects as maps in JavaScript](http://www.2ality.com/2012/01/objects-as-maps.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1379,"column":17},"end":{"line":1379,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ba82444e7b243b587792bfadf87eb289","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1386,"column":68},"end":{"line":1386,"column":68}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1390,"column":54},"end":{"line":1390,"column":54}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1390,"column":63},"end":{"line":1390,"column":63}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1397,"column":62},"end":{"line":1397,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1415,"column":57},"end":{"line":1415,"column":57}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1415,"column":87},"end":{"line":1415,"column":87}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1416,"column":40},"end":{"line":1416,"column":40}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1416,"column":68},"end":{"line":1416,"column":68}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"no-new-func","description":"The Function constructor is eval.","content":{"body":"# Disallow Function Constructor (no-new-func)\n\nIt's possible to create functions in JavaScript using the `Function` constructor, such as:\n\n```js\nvar x = new Function(\"a\", \"b\", \"return a + b\");\n```\n\nThis is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.\n\n## Rule Details\n\nThis error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the `eval` function.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = new Function(\"a\", \"b\", \"return a + b\");\nvar x = Function(\"a\", \"b\", \"return a + b\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = function (a, b) {\n    return a + b;\n};\n```\n\n## When Not To Use It\n\nIn more advanced cases where you really need to use the `Function` constructor.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1416,"column":85},"end":{"line":1416,"column":85}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12efce9ead5357dfa1df3633e7785b74","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1417,"column":27},"end":{"line":1417,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1424,"column":27},"end":{"line":1424,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1456,"column":30},"end":{"line":1456,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1500,"column":1},"end":{"line":1500,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f3dd8cddb8861b702208425e6dd8f4a","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1526,"column":1},"end":{"line":1526,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1536,"column":21},"end":{"line":1536,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unexpected-multiline","description":"Unexpected newline between function and ( of function call.","content":{"body":"# disallow confusing multiline expressions (no-unexpected-multiline)\n\nSemicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the [semi](./semi.md) rule.\n\nThe rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, **except** where one of the following is true:\n\n* The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n* The line is `--` or `++` (in which case it will decrement/increment the next token.)\n* It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n* The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\nIn the exceptions where a newline does **not** end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.\n\n## Rule Details\n\nThis rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar\n(1 || 2).baz();\n\nvar hello = 'world'\n[1, 2, 3].forEach(addNumber);\n\nlet x = function() {}\n`hello`\n\nlet x = function() {}\nx\n`hello`\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar;\n(1 || 2).baz();\n\nvar foo = bar\n;(1 || 2).baz()\n\nvar hello = 'world';\n[1, 2, 3].forEach(addNumber);\n\nvar hello = 'world'\nvoid [1, 2, 3].forEach(addNumber);\n\nlet x = function() {};\n`hello`\n\nlet tag = function() {}\ntag `hello`\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are confident that you will not accidentally introduce code like this.\n\nNote that the patterns considered problems are **not** flagged by the [semi](semi.md) rule.\n\n## Related Rules\n\n* [func-call-spacing](func-call-spacing.md)\n* [semi](semi.md)\n* [space-unary-ops](space-unary-ops.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1578,"column":14},"end":{"line":1578,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"e7adbdedae01fd5247eecbe56cefae45","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1657,"column":25},"end":{"line":1657,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1657,"column":29},"end":{"line":1657,"column":29}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1880,"column":32},"end":{"line":1880,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"3b41e02322ca07cce69535a6a7131d28","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1880,"column":39},"end":{"line":1880,"column":39}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'Exception' has a complexity of 7.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1935,"column":13},"end":{"line":1935,"column":13}}},"remediation_points":1070000,"fingerprint":"de90ebceecbb717477ce56ac006e087f","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'line' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1937,"column":21},"end":{"line":1937,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65a92149e57674c4e3172d2bf79a1f50","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'column' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":1938,"column":21},"end":{"line":1938,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a478daebffe5e2002d15a0b5bb4e6d16","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 8.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2086,"column":63},"end":{"line":2086,"column":63}}},"remediation_points":1140000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2092,"column":53},"end":{"line":2092,"column":53}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"3315da7e480fa5a08c88ac7e703adf4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2092,"column":61},"end":{"line":2092,"column":61}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 14.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2135,"column":49},"end":{"line":2135,"column":49}}},"remediation_points":1560000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'data' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2144,"column":25},"end":{"line":2144,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f197a77b101fd0fdb3bf597c1be2409","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'contextPath' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2145,"column":25},"end":{"line":2145,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a478daebffe5e2002d15a0b5bb4e6d16","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'priorKey' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2185,"column":33},"end":{"line":2185,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"993e0f9da91638922dd67b6475a5acbc","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2293,"column":25},"end":{"line":2293,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2293,"column":44},"end":{"line":2293,"column":44}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2295,"column":48},"end":{"line":2295,"column":48}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"cc2387ff24e4b6eb5c885faabae8f9fd","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2295,"column":67},"end":{"line":2295,"column":67}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-useless-concat","description":"Unexpected string concatenation of literals.","content":{"body":"# Disallow unnecessary concatenation of strings (no-useless-concat)\n\nIt's unnecessary to concatenate two strings together, such as:\n\n```js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn't important and the code can be rewritten as:\n\n```js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\n// these are the same as \"10\"\nvar a = `some` + `string`;\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2530,"column":144},"end":{"line":2530,"column":144}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"228787cac852a7bfcff7de5194528dda","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-useless-concat","description":"Unexpected string concatenation of literals.","content":{"body":"# Disallow unnecessary concatenation of strings (no-useless-concat)\n\nIt's unnecessary to concatenate two strings together, such as:\n\n```js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn't important and the code can be rewritten as:\n\n```js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\n// these are the same as \"10\"\nvar a = `some` + `string`;\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2533,"column":143},"end":{"line":2533,"column":143}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"228787cac852a7bfcff7de5194528dda","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'invokePartialWrapper' has a complexity of 8.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2556,"column":17},"end":{"line":2556,"column":17}}},"remediation_points":1140000,"fingerprint":"73c127bd683757491570071527579e71","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2569,"column":25},"end":{"line":2569,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c0f4982240a91a11e40ed9a763604d26","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2569,"column":32},"end":{"line":2569,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2573,"column":25},"end":{"line":2573,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c0f4982240a91a11e40ed9a763604d26","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2573,"column":32},"end":{"line":2573,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-eq-null","description":"Use ‘===’ to compare with ‘null’.","content":{"body":"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2602,"column":46},"end":{"line":2602,"column":46}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eba719638b1b2606ba827d8030629c7c","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2602,"column":62},"end":{"line":2602,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'ret' has a complexity of 9.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2645,"column":17},"end":{"line":2645,"column":17}}},"remediation_points":1210000,"fingerprint":"28b47d31aee042546485fdc40bfc45ee","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'depths' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2654,"column":25},"end":{"line":2654,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f197a77b101fd0fdb3bf597c1be2409","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2658,"column":46},"end":{"line":2658,"column":46}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-func-assign","description":"'main' is a function.","content":{"body":"# disallow reassigning `function` declarations (no-func-assign)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n```js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction foo() {\n    foo = bar;\n}\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction foo(foo) { // `foo` is shadowed.\n    foo = bar;\n}\n\nfunction foo() {\n    var foo = bar;  // `foo` is shadowed.\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2667,"column":21},"end":{"line":2667,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1b1cf2d9da1614d00fc7c2d89f4a398d","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2714,"column":43},"end":{"line":2714,"column":43}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-func-assign","description":"'prog' is a function.","content":{"body":"# disallow reassigning `function` declarations (no-func-assign)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n```js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction foo() {\n    foo = bar;\n}\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction foo(foo) { // `foo` is shadowed.\n    foo = bar;\n}\n\nfunction foo() {\n    var foo = bar;  // `foo` is shadowed.\n}\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2721,"column":17},"end":{"line":2721,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"990f790d9abc3d390d0311381d7e445a","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function 'invokePartial' has a complexity of 7.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2748,"column":13},"end":{"line":2748,"column":13}}},"remediation_points":1070000,"fingerprint":"d52e37decf733e5b590c20acab2bc743","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef-init","description":"It's not necessary to initialize 'partialBlock' to undefined.","content":{"body":"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2756,"column":21},"end":{"line":2756,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"993e0f9da91638922dd67b6475a5acbc","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2758,"column":21},"end":{"line":2758,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 16.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2867,"column":27},"end":{"line":2867,"column":27}}},"remediation_points":1700000,"fingerprint":"45d2125ae705d0b2c85fe1dde0b30f02","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"guard-for-in","description":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","content":{"body":"# Require Guarding for-in (guard-for-in)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n```js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](no-prototype-builtins.md).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n* [no-prototype-builtins](no-prototype-builtins.md)\n\n## Further Reading\n\n* [Exploring JavaScript for-in loops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n* [The pitfalls of using objects as maps in JavaScript](http://www.2ality.com/2012/01/objects-as-maps.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2878,"column":17},"end":{"line":2878,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ba82444e7b243b587792bfadf87eb289","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2885,"column":68},"end":{"line":2885,"column":68}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2889,"column":54},"end":{"line":2889,"column":54}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"wrap-iife","description":"Move the invocation into the parens that contain the function.","content":{"body":"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2889,"column":63},"end":{"line":2889,"column":63}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"df0af9d698cb251e60e9ed69e16698ac","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2896,"column":62},"end":{"line":2896,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2914,"column":57},"end":{"line":2914,"column":57}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2914,"column":87},"end":{"line":2914,"column":87}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2915,"column":40},"end":{"line":2915,"column":40}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2915,"column":68},"end":{"line":2915,"column":68}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"no-new-func","description":"The Function constructor is eval.","content":{"body":"# Disallow Function Constructor (no-new-func)\n\nIt's possible to create functions in JavaScript using the `Function` constructor, such as:\n\n```js\nvar x = new Function(\"a\", \"b\", \"return a + b\");\n```\n\nThis is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.\n\n## Rule Details\n\nThis error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the `eval` function.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = new Function(\"a\", \"b\", \"return a + b\");\nvar x = Function(\"a\", \"b\", \"return a + b\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = function (a, b) {\n    return a + b;\n};\n```\n\n## When Not To Use It\n\nIn more advanced cases where you really need to use the `Function` constructor.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2915,"column":85},"end":{"line":2915,"column":85}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12efce9ead5357dfa1df3633e7785b74","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2916,"column":27},"end":{"line":2916,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '===' and instead saw '=='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2923,"column":27},"end":{"line":2923,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"97b6496d60cf2cab5a0709886b3d05d0","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"eqeqeq","description":"Expected '!==' and instead saw '!='.","content":{"body":"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell eslint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2955,"column":30},"end":{"line":2955,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"70e7b29a68d1267f090eec71d5831cb8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/handlebars.js","positions":{"begin":{"line":2999,"column":1},"end":{"line":2999,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6f3dd8cddb8861b702208425e6dd8f4a","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/pl-header.js","positions":{"begin":{"line":4,"column":21},"end":{"line":4,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"5f54601ac3684335a77061e7bf9b3f71","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 7.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/pl-header.js","positions":{"begin":{"line":8,"column":47},"end":{"line":8,"column":47}}},"remediation_points":1070000,"fingerprint":"99bb8380fba39f4704cbf2987d887f52","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Arrow function has a complexity of 9.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/source/js/pl-header.js","positions":{"begin":{"line":48,"column":23},"end":{"line":48,"column":23}}},"remediation_points":1210000,"fingerprint":"99bb8380fba39f4704cbf2987d887f52","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/contributors.js","positions":{"begin":{"line":19,"column":27},"end":{"line":19,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"7f7d5a303d9844dd188051b393f932c1","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-statements","description":"Arrow function has too many statements (51). Maximum allowed is 30.","content":{"body":"# enforce a maximum number of statements allowed in function blocks (max-statements)\n\nThe `max-statements` rule allows you to specify the maximum number of statements allowed in a function.\n\n```js\nfunction foo() {\n  var bar = 1; // one statement\n  var baz = 2; // two statements\n  var qux = 3; // three statements\n}\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of statements allowed in function blocks.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `10`) enforces a maximum number of statements allows in function blocks\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\nThis rule has an object option:\n\n* `\"ignoreTopLevelFunctions\": true` ignores top-level functions\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 10 }` option:\n\n```js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n}\n\nlet foo = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n};\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 10 }` option:\n\n```js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  return function () {\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    return 42;\n  };\n}\n\nlet foo = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  return function () {\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    return 42;\n  };\n}\n```\n\n### ignoreTopLevelFunctions\n\nExamples of additional **correct** code for this rule with the `{ \"max\": 10 }, { \"ignoreTopLevelFunctions\": true }` options:\n\n```js\n/*eslint max-statements: [\"error\", 10, { \"ignoreTopLevelFunctions\": true }]*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  var foo11 = 11;\n}\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":40,"column":40},"end":{"line":40,"column":40}}},"remediation_points":2470000,"engine_name":"eslint","fingerprint":"ac322d1d02190b7165a7aa72bca8080e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Arrow function has a complexity of 21.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":40,"column":40},"end":{"line":40,"column":40}}},"remediation_points":2050000,"fingerprint":"525755a954d4b5e9812f950be2b7b759","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":46,"column":35},"end":{"line":46,"column":35}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":56,"column":33},"end":{"line":56,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":60,"column":32},"end":{"line":60,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":61,"column":18},"end":{"line":61,"column":18}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":64,"column":37},"end":{"line":64,"column":37}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":103,"column":50},"end":{"line":103,"column":50}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":178,"column":29},"end":{"line":178,"column":29}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":182,"column":28},"end":{"line":182,"column":28}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pattern.js","positions":{"begin":{"line":213,"column":60},"end":{"line":213,"column":60}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"00115e2868431f033103df6219a108bf","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pkg-json-data.js","positions":{"begin":{"line":25,"column":27},"end":{"line":25,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"562d2d8155f9c53d96f3c3fd9b70dd2c","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"guard-for-in","description":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","content":{"body":"# Require Guarding for-in (guard-for-in)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n```js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](no-prototype-builtins.md).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n* [no-prototype-builtins](no-prototype-builtins.md)\n\n## Further Reading\n\n* [Exploring JavaScript for-in loops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n* [The pitfalls of using objects as maps in JavaScript](http://www.2ality.com/2012/01/objects-as-maps.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/pkg-json-data.js","positions":{"begin":{"line":40,"column":13},"end":{"line":40,"column":13}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"67547ba15fb0f04bb616476a7e953a07","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":16,"column":30},"end":{"line":16,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":19,"column":30},"end":{"line":19,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":22,"column":30},"end":{"line":22,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":25,"column":30},"end":{"line":25,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":28,"column":30},"end":{"line":28,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":31,"column":30},"end":{"line":31,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":34,"column":30},"end":{"line":34,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix/helpers/uxspec-header.js","positions":{"begin":{"line":35,"column":10},"end":{"line":35,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"aba7f2dbd305a5b158b4dc8dda43d4ff","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"fatal","description":"Parsing error: Unexpected token ...","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"rollup.config.js","positions":{"begin":{"line":34,"column":5},"end":{"line":34,"column":5}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"98b5e42fc657473b53438f78aa42fd5b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"babel.config.js","positions":{"begin":{"line":4,"column":55},"end":{"line":4,"column":55}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12b43aa2dd6aa719dc4a3c91b10b5bbb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"babel.config.js","positions":{"begin":{"line":4,"column":58},"end":{"line":4,"column":58}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12b43aa2dd6aa719dc4a3c91b10b5bbb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"babel.config.js","positions":{"begin":{"line":4,"column":61},"end":{"line":4,"column":61}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12b43aa2dd6aa719dc4a3c91b10b5bbb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"babel.config.js","positions":{"begin":{"line":5,"column":35},"end":{"line":5,"column":35}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12b43aa2dd6aa719dc4a3c91b10b5bbb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"babel.config.js","positions":{"begin":{"line":6,"column":6},"end":{"line":6,"column":6}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"12b43aa2dd6aa719dc4a3c91b10b5bbb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":5,"column":71},"end":{"line":5,"column":71}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":14,"column":37},"end":{"line":14,"column":37}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":16,"column":40},"end":{"line":16,"column":40}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":17,"column":45},"end":{"line":17,"column":45}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":23,"column":25},"end":{"line":23,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":24,"column":10},"end":{"line":24,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":28,"column":64},"end":{"line":28,"column":64}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":32,"column":38},"end":{"line":32,"column":38}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":82,"column":62},"end":{"line":82,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":85,"column":23},"end":{"line":85,"column":23}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":88,"column":51},"end":{"line":88,"column":51}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":89,"column":14},"end":{"line":89,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":90,"column":10},"end":{"line":90,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":94,"column":40},"end":{"line":94,"column":40}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"jest.config.js","positions":{"begin":{"line":95,"column":6},"end":{"line":95,"column":6}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"41eb406c8c79bc3f2593c9e586de9d79","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"complexity","description":"Function has a complexity of 20.","content":{"body":"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [About Complexity](http://jscomplexity.org/complexity)\n* [Complexity Analysis of JavaScript Code](http://ariya.ofilabs.com/2012/12/complexity-analysis-of-javascript-code.html)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"handlebars-helper/jest/ifCond.js","positions":{"begin":{"line":1,"column":18},"end":{"line":1,"column":18}}},"remediation_points":1980000,"fingerprint":"729c10f7d1f39574dcb1993b77b1f183","engine_name":"eslint","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"handlebars-helper/rollup/ifCond.js","positions":{"begin":{"line":50,"column":2},"end":{"line":50,"column":2}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"dba83e2fe67466172862bcf39a4c3645","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"handlebars-helper/rollup/leadingZero.js","positions":{"begin":{"line":29,"column":2},"end":{"line":29,"column":2}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"7d91051393911de70d45e9ec79c40723","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-serve.js","positions":{"begin":{"line":7,"column":14},"end":{"line":7,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"90e366dcb2ced60b62a8da61749f4846","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":14,"column":2},"end":{"line":14,"column":2}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"9e85ca51eb5267b5978a0bb210629c8d","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":24,"column":35},"end":{"line":24,"column":35}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":27,"column":58},"end":{"line":27,"column":58}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":41,"column":32},"end":{"line":41,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":46,"column":33},"end":{"line":46,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":48,"column":15},"end":{"line":48,"column":15}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":55,"column":28},"end":{"line":55,"column":28}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":68,"column":24},"end":{"line":68,"column":24}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":81,"column":33},"end":{"line":81,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":81,"column":36},"end":{"line":81,"column":36}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":90,"column":17},"end":{"line":90,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"2f6907a82348350c93ab30f52c94e5f4","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":92,"column":29},"end":{"line":92,"column":29}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":93,"column":10},"end":{"line":93,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":97,"column":185},"end":{"line":97,"column":185}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":97,"column":188},"end":{"line":97,"column":188}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-process-exit","description":"Don't use process.exit(); throw an error instead.","content":{"body":"# Disallow process.exit() (no-process-exit)\n\nThe `process.exit()` method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:\n\n```js\nif (somethingBadHappened) {\n    console.error(\"Something bad happened!\");\n    process.exit(1);\n}\n```\n\nThis code could appear in any module and will stop the entire application when `somethingBadHappened` is truthy. This doesn't give the application any chance to respond to the error. It's usually better to throw an error and allow the application to handle it appropriately:\n\n```js\nif (somethingBadHappened) {\n    throw new Error(\"Something bad happened!\");\n}\n```\n\nBy throwing an error in this way, other parts of the application have an opportunity to handle the error rather than stopping the application altogether. If the error bubbles all the way up to the process without being handled, then the process will exit and a non-zero exit code will returned, so the end result is the same.\n\n## Rule Details\n\nThis rule aims to prevent the use of `process.exit()` in Node.js JavaScript. As such, it warns whenever `process.exit()` is found in code.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-process-exit: \"error\"*/\n\nprocess.exit(1);\nprocess.exit(0);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-process-exit: \"error\"*/\n\nProcess.exit();\nvar exit = process.exit;\n```\n\n## When Not To Use It\n\nThere may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":107,"column":9},"end":{"line":107,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"b60f69888f1347e66e76fc9de9766108","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-extra-semi","description":"Unnecessary semicolon.","content":{"body":"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":111,"column":2},"end":{"line":111,"column":2}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"9e85ca51eb5267b5978a0bb210629c8d","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":124,"column":34},"end":{"line":124,"column":34}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":125,"column":10},"end":{"line":125,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":133,"column":38},"end":{"line":133,"column":38}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-rollup.config.js","positions":{"begin":{"line":134,"column":6},"end":{"line":134,"column":6}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"eb437f4daaf6f7888f523295c254fefe","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":16,"column":21},"end":{"line":16,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":21,"column":50},"end":{"line":21,"column":50}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":24,"column":17},"end":{"line":24,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":30,"column":30},"end":{"line":30,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":34,"column":48},"end":{"line":34,"column":48}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":84,"column":29},"end":{"line":84,"column":29}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":85,"column":10},"end":{"line":85,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":97,"column":14},"end":{"line":97,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":98,"column":10},"end":{"line":98,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-dupe-keys","description":"Duplicate key 'host'.","content":{"body":"# disallow duplicate keys in object literals (no-dupe-keys)\n\nMultiple properties with the same key in object literals can cause unexpected behavior in your application.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n```\n\n## Rule Details\n\nThis rule disallows duplicate keys in object literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    \"bar\": \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    0x1: \"baz\",\n    1: \"qux\"\n};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    quxx: \"qux\"\n};\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":120,"column":5},"end":{"line":120,"column":5}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"de5d81a9a15df85b0decf024a73b0861","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":131,"column":16},"end":{"line":131,"column":16}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":135,"column":25},"end":{"line":135,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":138,"column":39},"end":{"line":138,"column":39}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":144,"column":37},"end":{"line":144,"column":37}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":145,"column":10},"end":{"line":145,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":156,"column":23},"end":{"line":156,"column":23}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-browsersync-config.js","positions":{"begin":{"line":158,"column":32},"end":{"line":158,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4e16274b3d6d163da3beda6c5f44f4b","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/generateComponent.js","positions":{"begin":{"line":220,"column":6},"end":{"line":220,"column":6}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"119706dbcfb8ccd13f5ff7f712a415a1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":2,"column":17},"end":{"line":2,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":3,"column":36},"end":{"line":3,"column":36}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":9,"column":49},"end":{"line":9,"column":49}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":26,"column":34},"end":{"line":26,"column":34}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":46,"column":52},"end":{"line":46,"column":52}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":64,"column":21},"end":{"line":64,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":88,"column":46},"end":{"line":88,"column":46}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":96,"column":74},"end":{"line":96,"column":74}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":107,"column":48},"end":{"line":107,"column":48}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/getContributors.js","positions":{"begin":{"line":119,"column":33},"end":{"line":119,"column":33}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"c9c6304150610e6c1d40477929296d03","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/pinVersion.js","positions":{"begin":{"line":3,"column":81},"end":{"line":3,"column":81}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6015db6497d94523ead8fb267eb0b094","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"guard-for-in","description":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","content":{"body":"# Require Guarding for-in (guard-for-in)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n```js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](no-prototype-builtins.md).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n* [no-prototype-builtins](no-prototype-builtins.md)\n\n## Further Reading\n\n* [Exploring JavaScript for-in loops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n* [The pitfalls of using objects as maps in JavaScript](http://www.2ality.com/2012/01/objects-as-maps.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/pinVersion.js","positions":{"begin":{"line":7,"column":1},"end":{"line":7,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"56539dff8c999e43e44f1c0f891be935","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/pinVersion.js","positions":{"begin":{"line":11,"column":131},"end":{"line":11,"column":131}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6015db6497d94523ead8fb267eb0b094","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-empty","description":"Empty block statement.","content":{"body":"# disallow empty block statements (no-empty)\n\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn't completed. They can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty `catch` or `finally` block of a `try` statement to indicate that execution should continue regardless of errors).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n}\n\nwhile (foo) {\n}\n\nswitch(foo) {\n}\n\ntry {\n    doSomething();\n} catch(ex) {\n\n} finally {\n\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n    // empty\n}\n\nwhile (foo) {\n    /* empty */\n}\n\ntry {\n    doSomething();\n} catch (ex) {\n    // continue regardless of error\n}\n\ntry {\n    doSomething();\n} finally {\n    /* continue regardless of error */\n}\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n* `\"allowEmptyCatch\": true` allows empty `catch` clauses (that is, which do not contain a comment)\n\n### allowEmptyCatch\n\nExamples of additional **correct** code for this rule with the `{ \"allowEmptyCatch\": true }` option:\n\n```js\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\ntry {\n    doSomething();\n} catch (ex) {}\n\ntry {\n    doSomething();\n}\ncatch (ex) {}\nfinally {\n    /* continue regardless of error */\n}\n```\n\n## When Not To Use It\n\nIf you intentionally use empty block statements then you can disable this rule.\n\n## Related Rules\n\n* [no-empty-function](./no-empty-function.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/pinVersion.js","positions":{"begin":{"line":17,"column":15},"end":{"line":17,"column":15}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"fa9b1fe06c42fea36f4e57e75ef22a39","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/pinVersion.js","positions":{"begin":{"line":23,"column":91},"end":{"line":23,"column":91}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"6015db6497d94523ead8fb267eb0b094","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":11,"column":34},"end":{"line":11,"column":34}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d39b387ebab32ba2567ee0731cdf7bc1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":56,"column":27},"end":{"line":56,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d39b387ebab32ba2567ee0731cdf7bc1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":146,"column":63},"end":{"line":146,"column":63}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d39b387ebab32ba2567ee0731cdf7bc1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":160,"column":72},"end":{"line":160,"column":72}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d39b387ebab32ba2567ee0731cdf7bc1","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":173,"column":17},"end":{"line":173,"column":17}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"765919c492cb1edfd24f7f4a6ffe71af","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"scripts/syncHbs.js","positions":{"begin":{"line":175,"column":60},"end":{"line":175,"column":60}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d39b387ebab32ba2567ee0731cdf7bc1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"brix-watch.js","positions":{"begin":{"line":7,"column":16},"end":{"line":7,"column":16}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"94758e34e96c60e63cbfeecadf6e95d6","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"packages/design-tokens/tools/generate-overview.js","positions":{"begin":{"line":27,"column":94},"end":{"line":27,"column":94}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"58867790c6950bb82240008bcad136ea","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"packages/design-tokens/tools/generate-overview.js","positions":{"begin":{"line":83,"column":67},"end":{"line":83,"column":67}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"58867790c6950bb82240008bcad136ea","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"comma-dangle","description":"Unexpected trailing comma.","content":{"body":"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"packages/design-tokens/tools/generate-overview.js","positions":{"begin":{"line":94,"column":63},"end":{"line":94,"column":63}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"58867790c6950bb82240008bcad136ea","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":3,"end":3},"path":"brix-build.sh"},"type":"issue","engine_name":"fixme","fingerprint":"dac08d4464bc8615297f7f9b505a9bf6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":61,"end":61},"path":"brix/app/10-components/_scaffold-example/ScaffoldExample.ts"},"type":"issue","engine_name":"fixme","fingerprint":"795ed623c1abfe50c71efab22df7a96d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":27,"end":27},"path":"brix/app/10-components/_scaffold-example/scaffold-example.hbs"},"type":"issue","engine_name":"fixme","fingerprint":"2be037c66cae442a048f6ad49f0f18ca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"brix/app/10-components/promo-price/PromoPrice.ts"},"type":"issue","engine_name":"fixme","fingerprint":"5d97a2e8686bbcd199022c8fa4235bec","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":29,"end":29},"path":"brix/app/20-blocks/help-and-support-contact/help-and-support-contact.hbs"},"type":"issue","engine_name":"fixme","fingerprint":"968b17f6bdf838e39f8f802056b5f456","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":34,"end":34},"path":"brix/app/20-blocks/help-and-support-contact/help-and-support-contact.hbs"},"type":"issue","engine_name":"fixme","fingerprint":"968b17f6bdf838e39f8f802056b5f456","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":7,"end":7},"path":"brix/helpers/contributors.js"},"type":"issue","engine_name":"fixme","fingerprint":"921dfe03db88eb989e731e721b638470","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":131,"end":131},"path":"rollup.config.js"},"type":"issue","engine_name":"fixme","fingerprint":"4903dd0280009e702f1b0bc79c28687f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"jest.config.js"},"type":"issue","engine_name":"fixme","fingerprint":"99ef8e71cca4bcdf6ff26dd3b0f54c44","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":182,"end":182},"path":".gitlab-ci.yml"},"type":"issue","engine_name":"fixme","fingerprint":"a8a50d062c7dd4ffe8a3b4b6679d1c72","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":187,"end":187},"path":".gitlab-ci.yml"},"type":"issue","engine_name":"fixme","fingerprint":"ad6456bb2a58c06c362a0fd518f8a4b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":201,"end":201},"path":".gitlab-ci.yml"},"type":"issue","engine_name":"fixme","fingerprint":"a8a50d062c7dd4ffe8a3b4b6679d1c72","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":206,"end":206},"path":".gitlab-ci.yml"},"type":"issue","engine_name":"fixme","fingerprint":"ad6456bb2a58c06c362a0fd518f8a4b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":7,"end":7},"path":"scripts/generateComponent.js"},"type":"issue","engine_name":"fixme","fingerprint":"1b01e5f384c3e103c60e117310668f7a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":3,"end":3},"path":"scripts/syncHbs.js"},"type":"issue","engine_name":"fixme","fingerprint":"737e7160a8eacf2b2deb12011f60d15f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/unordered-vertical-list/__tests__/UnorderedVerticalList.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"826a24c59d65e4a867a45351880f8281","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":46,"end":46},"path":"packages/offer-price/offer-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"adde32d534169b07a47569e650181901","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":48,"end":48},"path":"packages/offer-price/offer-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"adde32d534169b07a47569e650181901","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":60,"end":60},"path":"packages/offer-price/offer-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9bef2a18ea1f75e0bb649e57fc6ac238","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":64,"end":64},"path":"packages/offer-price/offer-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"adde32d534169b07a47569e650181901","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":70,"end":70},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"6fc734d57cc7993f92794c7e5d5239f9","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":216,"end":216},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"20a4a9e575f75f2680a126619fcf20e8","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":220,"end":220},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"d927904aeccedd79524c3503ca06f782","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":231,"end":231},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"b3ad24c0aed91bdb7cea1802e458787c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":262,"end":262},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"ae63e577982499f51615ae381d033210","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":321,"end":321},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"c6ad7058b005feac7b98ae8e80e5745b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":322,"end":322},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"20a4a9e575f75f2680a126619fcf20e8","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":333,"end":333},"path":"packages/tabs/Tabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"2f0f416052773ea7211cb3c965498c77","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":19,"end":19},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":33,"end":33},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":69,"end":69},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":130,"end":130},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":136,"end":136},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"12120fe4f9f93ed54564a95206cc4eff","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":138,"end":138},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":143,"end":143},"path":"packages/tabs/tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5bba22c9b679dde8d1ef747e9dc5183c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":18,"end":18},"path":"packages/tabs/TabsInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"c347ff82fe19b6d3a1004aa4a101f783","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":73,"end":73},"path":"packages/input-field/InputField.ts"},"type":"issue","engine_name":"fixme","fingerprint":"98f2d670039af0f542d9ae9c59e8737b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/input-field/input-field.scss"},"type":"issue","engine_name":"fixme","fingerprint":"625b6fead40324163adb6ff239e1feca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":29,"end":29},"path":"packages/input-field/input-field.scss"},"type":"issue","engine_name":"fixme","fingerprint":"625b6fead40324163adb6ff239e1feca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":62,"end":62},"path":"packages/input-field/input-field.scss"},"type":"issue","engine_name":"fixme","fingerprint":"625b6fead40324163adb6ff239e1feca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":106,"end":106},"path":"packages/input-field/input-field.scss"},"type":"issue","engine_name":"fixme","fingerprint":"625b6fead40324163adb6ff239e1feca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":119,"end":119},"path":"packages/input-field/input-field.scss"},"type":"issue","engine_name":"fixme","fingerprint":"625b6fead40324163adb6ff239e1feca","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/input-field/InputFieldInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"61e90ab1a69c40e03b7ccba6b6d0cbd4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":16,"end":16},"path":"packages/headline/headline.scss"},"type":"issue","engine_name":"fixme","fingerprint":"caf11d27a50500a1494d98c5ef9d88b7","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":5,"end":5},"path":"packages/headline/HeadlineInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"10901e5ef3aa651b4c8dcca9b7d2d643","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/headline/HeadlineInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"dc40ee09630d17ed85af994854809e2f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":54,"end":54},"path":"packages/headline/HeadlineInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"c2f3f962f95f8c915c8d3c785cd083d3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/form-text-input/form-text-input.scss"},"type":"issue","engine_name":"fixme","fingerprint":"49ec362ca367dfe213eceb07cbb738b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":13,"end":13},"path":"packages/form-text-input/form-text-input.scss"},"type":"issue","engine_name":"fixme","fingerprint":"49ec362ca367dfe213eceb07cbb738b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/form-text-input/form-text-input.scss"},"type":"issue","engine_name":"fixme","fingerprint":"49ec362ca367dfe213eceb07cbb738b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/form-text-input/form-text-input.scss"},"type":"issue","engine_name":"fixme","fingerprint":"49ec362ca367dfe213eceb07cbb738b6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":31,"end":31},"path":"packages/button-tiles/button-tiles.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ceb56585d3cd529a9b502818ac578801","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/button-tiles/button-tiles.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ceb56585d3cd529a9b502818ac578801","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":69,"end":69},"path":"packages/button-tiles/ButtonTiles.ts"},"type":"issue","engine_name":"fixme","fingerprint":"8c4d366dfe44a4b780bbe7e7afd51bd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":103,"end":103},"path":"packages/button-tiles/ButtonTiles.ts"},"type":"issue","engine_name":"fixme","fingerprint":"cc271e6fd7683436fed9d816b762f7d7","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":38,"end":38},"path":"packages/image-slider/ImageSlider.ts"},"type":"issue","engine_name":"fixme","fingerprint":"04ffdb88d7d2f6701e26bb5b888f4d97","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":25,"end":25},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":29,"end":29},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":31,"end":31},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":33,"end":33},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":38,"end":38},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":76,"end":76},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":95,"end":95},"path":"packages/image-slider/image-slider.scss"},"type":"issue","engine_name":"fixme","fingerprint":"df0b68350304b2e8b13912035194fdf3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/just-text/JustText.ts"},"type":"issue","engine_name":"fixme","fingerprint":"6735e6bb9c8cdf6bce2d47090cd9789d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/just-text/JustText.ts"},"type":"issue","engine_name":"fixme","fingerprint":"bcd81725c21108c21ca3ccd724a13be5","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/just-text/JustText.ts"},"type":"issue","engine_name":"fixme","fingerprint":"8a026a76a7dd8c5623644240eb3f5840","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":22,"end":22},"path":"packages/just-text/JustTextInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"c88a8e94fa6915ca7d05d71487e93eda","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/image-caption/image-caption.scss"},"type":"issue","engine_name":"fixme","fingerprint":"932eb6a69ce99d4ef58f87a4f59f1708","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":114,"end":114},"path":"packages/image-gallery/image-gallery.scss"},"type":"issue","engine_name":"fixme","fingerprint":"47429b413a41cb58deb802dc120bfd92","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":120,"end":120},"path":"packages/image-gallery/image-gallery.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa162c6a21c5bea0cbda2666aa467101","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":124,"end":124},"path":"packages/image-gallery/image-gallery.scss"},"type":"issue","engine_name":"fixme","fingerprint":"47429b413a41cb58deb802dc120bfd92","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":126,"end":126},"path":"packages/image-gallery/image-gallery.scss"},"type":"issue","engine_name":"fixme","fingerprint":"47429b413a41cb58deb802dc120bfd92","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":161,"end":161},"path":"packages/image-gallery/image-gallery.scss"},"type":"issue","engine_name":"fixme","fingerprint":"a186e9391f5f15c708283f5f1ce727b3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":1,"end":1},"path":"packages/button/Button.ts"},"type":"issue","engine_name":"fixme","fingerprint":"dcf3b77ab8f1719c08bb81a1720e4b26","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":70,"end":70},"path":"packages/button/ButtonInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"752a8a814bcfdcf553f0193c7dec16f9","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":9,"end":9},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":11,"end":11},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":13,"end":13},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":17,"end":17},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":19,"end":19},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":25,"end":25},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":27,"end":27},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":29,"end":29},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":31,"end":31},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":39,"end":39},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":41,"end":41},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":45,"end":45},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":49,"end":49},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":51,"end":51},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":55,"end":55},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":57,"end":57},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":59,"end":59},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":61,"end":61},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":128,"end":128},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":185,"end":185},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":187,"end":187},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":233,"end":233},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":239,"end":239},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"05348468d46d3e21372c7f68d24f9b69","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":247,"end":247},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":254,"end":254},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":306,"end":306},"path":"packages/button/button.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8bf253f1648d4eb5152f5ad1c036a505","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":9,"end":9},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":11,"end":11},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":13,"end":13},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":15,"end":15},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":17,"end":17},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":19,"end":19},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":34,"end":34},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":51,"end":51},"path":"packages/highlight-badge/highlight-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"720388b50f1c6807b88d08e24f4a2f85","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":25,"end":25},"path":"packages/highlight-badge/HighlightBadgeInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"7386194681dda292ef998ea0e9f315e8","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":26,"end":26},"path":"packages/highlight-badge/HighlightBadgeInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"18aee868771f985aa432105b6374ef3d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/simple-table/simple-table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d021d7ad175c0fe98b45d796e9db7ee2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/simple-table/simple-table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d021d7ad175c0fe98b45d796e9db7ee2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"21afe4ffbfbe8364e8f55b4f958c4009","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":63,"end":63},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":80,"end":80},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":84,"end":84},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":89,"end":89},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":99,"end":99},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":104,"end":104},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":109,"end":109},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":158,"end":158},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":162,"end":162},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":166,"end":166},"path":"packages/multi-picker/multi-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ee4c08aad9fca9e6071225c7473ad502","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":27,"end":27},"path":"packages/promo-price/PromoPrice.ts"},"type":"issue","engine_name":"fixme","fingerprint":"7b8371abbb4ffd0b6e8f198fe2567240","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":9,"end":9},"path":"packages/promo-price/README.md"},"type":"issue","engine_name":"fixme","fingerprint":"b092499d2ecf2914b6feda90915e7228","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/promo-price/README.md"},"type":"issue","engine_name":"fixme","fingerprint":"bb22b542310351b6e47757d48950631e","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":11,"end":11},"path":"packages/promo-price/README.md"},"type":"issue","engine_name":"fixme","fingerprint":"de023873e43824bb07cfa65259a8f3a4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":12,"end":12},"path":"packages/promo-price/README.md"},"type":"issue","engine_name":"fixme","fingerprint":"5e4f7c7d3a93c2b83331e4347abdabef","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":13,"end":13},"path":"packages/promo-price/README.md"},"type":"issue","engine_name":"fixme","fingerprint":"a0c5d32b3f8132bf0f6e04df0f18e37b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/promo-price/promo-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"80bd2cf2929ba3b2dc523da4cd2aa9ac","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":27,"end":27},"path":"packages/promo-price/promo-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"80bd2cf2929ba3b2dc523da4cd2aa9ac","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":36,"end":36},"path":"packages/promo-price/promo-price.scss"},"type":"issue","engine_name":"fixme","fingerprint":"80bd2cf2929ba3b2dc523da4cd2aa9ac","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":3,"end":3},"path":"packages/ribbon-badge/RibbonBadgeValidator.ts"},"type":"issue","engine_name":"fixme","fingerprint":"64d8df7218905b2cdc4be61351435c74","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":42,"end":42},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":46,"end":46},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":52,"end":52},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":57,"end":57},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":62,"end":62},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":67,"end":67},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":72,"end":72},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":77,"end":77},"path":"packages/ribbon-badge/ribbon-badge.scss"},"type":"issue","engine_name":"fixme","fingerprint":"99389f47a004a3e56d2746fc7b2d9dd6","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/basket-offer/basket-offer.scss"},"type":"issue","engine_name":"fixme","fingerprint":"0a2f31dc134d3266ccc00e8ce1210f66","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":52,"end":52},"path":"packages/basket-offer/basket-offer.scss"},"type":"issue","engine_name":"fixme","fingerprint":"0a2f31dc134d3266ccc00e8ce1210f66","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":79,"end":79},"path":"packages/basket-offer/basket-offer.scss"},"type":"issue","engine_name":"fixme","fingerprint":"0a2f31dc134d3266ccc00e8ce1210f66","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":38,"end":38},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":56,"end":56},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":58,"end":58},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":62,"end":62},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":79,"end":79},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":143,"end":143},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":145,"end":145},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":149,"end":149},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":158,"end":158},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":160,"end":160},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":164,"end":164},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":183,"end":183},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":185,"end":185},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":192,"end":192},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":200,"end":200},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":202,"end":202},"path":"packages/option-tabs/option-tabs.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ae6bb84ccb9c4bdd2201a5c52a2c583a","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":29,"end":29},"path":"packages/option-tabs/OptionTabsInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"63b4d11d1242035ccbaee15a9fe4d69f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":30,"end":30},"path":"packages/option-tabs/OptionTabsInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"5fc80f1924537b5f73bacff09eb35b0c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":118,"end":118},"path":"packages/option-tabs/OptionTabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"b7c0cd17721c684e9aa5cd7f6375e0dc","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":269,"end":269},"path":"packages/option-tabs/OptionTabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"72e565ffe061a42e5baffdc9700d56ba","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":362,"end":362},"path":"packages/option-tabs/OptionTabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"521fa50826a327719a6ef1dd04ca3424","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":393,"end":393},"path":"packages/option-tabs/OptionTabs.ts"},"type":"issue","engine_name":"fixme","fingerprint":"a652b8f28d6ae4cfaeb2778da8a3423b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"25b2456df7b53bb8b6c88e3d8781cd29","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":34,"end":34},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"b59ca17ca7c350212348172dbdd25052","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":359,"end":359},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"a4b4efa89ccdb776e2f78629567d6546","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":488,"end":488},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"e00d20b9f3f957c73ccdda25db890977","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":707,"end":707},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"a4b4efa89ccdb776e2f78629567d6546","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":786,"end":786},"path":"packages/option-tabs/__tests__/OptionTabs.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"018411538be177af072469de78df27f1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/timeline-stepper/TimelineStepperInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"a2a838cfedf50f2e8147c26317036493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"e64fe5379f017823077f89dd42efc344","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":38,"end":38},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":50,"end":50},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":70,"end":70},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5c7ed702672c15220574cb096e3bcd04","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":71,"end":71},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":79,"end":79},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"5c7ed702672c15220574cb096e3bcd04","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":80,"end":80},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":130,"end":130},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":149,"end":149},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":190,"end":190},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":198,"end":198},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":206,"end":206},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":211,"end":211},"path":"packages/timeline-stepper/timeline-stepper.scss"},"type":"issue","engine_name":"fixme","fingerprint":"430608fb804790403fa5c33a41356c9d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":11,"end":11},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":70,"end":70},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":88,"end":88},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":96,"end":96},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":98,"end":98},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":100,"end":100},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":115,"end":115},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":121,"end":121},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":126,"end":126},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":132,"end":132},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":134,"end":134},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":136,"end":136},"path":"packages/pattern-showcase/pattern-showcase.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f50290d2401b3edee6f902e202770687","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":150,"end":150},"path":"packages/pattern-showcase/usageToPrettier.ts"},"type":"issue","engine_name":"fixme","fingerprint":"f0c67c7b6e1234fe57bd7f33d1e4c1f9","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":2,"end":2},"path":"packages/form-selection-control/FormSelectionControlInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"058d2f306553005aa65834438f2791ab","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":50,"end":50},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":67,"end":67},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":102,"end":102},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":113,"end":113},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":181,"end":181},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":200,"end":200},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":218,"end":218},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":240,"end":240},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":291,"end":291},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":295,"end":295},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":301,"end":301},"path":"packages/form-selection-control/form-selection-control.scss"},"type":"issue","engine_name":"fixme","fingerprint":"34eec9c2dcbd5115ab88c285610d3157","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":49,"end":49},"path":"packages/tooltip/tooltip.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c92625aba32d9a40c91af36812da7a8c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":102,"end":102},"path":"packages/tooltip/tooltip.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c92625aba32d9a40c91af36812da7a8c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":117,"end":117},"path":"packages/tooltip/tooltip.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c92625aba32d9a40c91af36812da7a8c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":8,"end":8},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa631dfdffb388ab4b41df3b3b3f6493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa631dfdffb388ab4b41df3b3b3f6493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":12,"end":12},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa631dfdffb388ab4b41df3b3b3f6493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa631dfdffb388ab4b41df3b3b3f6493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa631dfdffb388ab4b41df3b3b3f6493","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":59,"end":59},"path":"packages/notification/notification.scss"},"type":"issue","engine_name":"fixme","fingerprint":"6f943298b3563d94e5c3fe18959391d3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"packages/accordion/AccordionInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"f08e0b16d6949f4b9f9b264f2fd3ad15","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":25,"end":25},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":48,"end":48},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":87,"end":87},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":96,"end":96},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":113,"end":113},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":117,"end":117},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":131,"end":131},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":160,"end":160},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":168,"end":168},"path":"packages/accordion/accordion.scss"},"type":"issue","engine_name":"fixme","fingerprint":"8360c444fbb302be39c2cff71cb45b64","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":32,"end":32},"path":"packages/loading-spinner/loading-spinner.scss"},"type":"issue","engine_name":"fixme","fingerprint":"714ee31b4971ebf34731026a181a19a1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":55,"end":55},"path":"packages/loading-spinner/loading-spinner.scss"},"type":"issue","engine_name":"fixme","fingerprint":"714ee31b4971ebf34731026a181a19a1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":27,"end":27},"path":"packages/color-swatch/ColorSwatchInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"cbee2fded37dd2ad216d3201d359962f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/color-swatch/color-swatch.scss"},"type":"issue","engine_name":"fixme","fingerprint":"960cd35d15e0e420e16b943b74829dd3","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":1,"end":1},"path":"packages/image-header/ImageHeader.ts"},"type":"issue","engine_name":"fixme","fingerprint":"025dcbf5d07489493ae4277a07535a02","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":62,"end":62},"path":"packages/image-header/ImageHeader.ts"},"type":"issue","engine_name":"fixme","fingerprint":"cf39770dfed60ecfad52be25f7100aba","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":5,"end":5},"path":"packages/image-header/ImageHeaderValidator.ts"},"type":"issue","engine_name":"fixme","fingerprint":"0b1a6d4de9ad1e2d578ad5d1f9f682d4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":36,"end":36},"path":"packages/image-text/ImageText.ts"},"type":"issue","engine_name":"fixme","fingerprint":"29c9a0803070c47bceb48220a8b4cb0c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":11,"end":11},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"41f039ad53cb8164dd5037dae8eeefa0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"fa81fd9df4d0f677b4022eab937c1ceb","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"41f039ad53cb8164dd5037dae8eeefa0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":36,"end":36},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"41f039ad53cb8164dd5037dae8eeefa0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":41,"end":41},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"41f039ad53cb8164dd5037dae8eeefa0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":46,"end":46},"path":"packages/form-select/form-select.scss"},"type":"issue","engine_name":"fixme","fingerprint":"41f039ad53cb8164dd5037dae8eeefa0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":52,"end":52},"path":"packages/core/PatternInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"0e5aaeba776fd69a45f894e8d02890f0","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":8,"end":8},"path":"packages/core/constants/Mq.ts"},"type":"issue","engine_name":"fixme","fingerprint":"9eee1462316e1cfec2aaf5e792485918","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/core/services/validation/validators/minLength.ts"},"type":"issue","engine_name":"fixme","fingerprint":"897b9270c7e776a7198f2f27b33d3bde","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/core/services/validation/validators/maxLength.ts"},"type":"issue","engine_name":"fixme","fingerprint":"f8740a0c08b719fc707e10aa5bb5e2c1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":7,"end":7},"path":"packages/core/Pattern.ts"},"type":"issue","engine_name":"fixme","fingerprint":"879ff6bed4319cef70cd94e618962fc7","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":68,"end":68},"path":"packages/core/types/Price.ts"},"type":"issue","engine_name":"fixme","fingerprint":"ca6733d6989a232f0258cf6509fd456d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":3,"end":3},"path":"packages/styles/src/precss/_icons.scss"},"type":"issue","engine_name":"fixme","fingerprint":"970530a2afdfea109626e02ba39e7875","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":16,"end":16},"path":"packages/styles/src/precss/_misc.scss"},"type":"issue","engine_name":"fixme","fingerprint":"80528834fd6ada2b0faac27b53789f40","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":52,"end":52},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1cff74d53d73eaf2ee5c8235f3a5cd23","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":76,"end":76},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1cff74d53d73eaf2ee5c8235f3a5cd23","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":95,"end":95},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1cff74d53d73eaf2ee5c8235f3a5cd23","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":114,"end":114},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1cff74d53d73eaf2ee5c8235f3a5cd23","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":128,"end":128},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1cff74d53d73eaf2ee5c8235f3a5cd23","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":217,"end":217},"path":"packages/styles/src/precss/_mixins.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f23c7db4174601b1ee55c9dc8ca1f8e1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":86,"end":86},"path":"packages/styles/src/base/_text.scss"},"type":"issue","engine_name":"fixme","fingerprint":"066695a4cd34f95409189859c2d47cb8","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":12,"end":12},"path":"packages/styles/src/base/_elements.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f7cd45c14f59f7797c444ec230a25072","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/styles/src/base/_elements.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f7cd45c14f59f7797c444ec230a25072","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":5,"end":5},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":14,"end":14},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":19,"end":19},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":33,"end":33},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":38,"end":38},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":43,"end":43},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":48,"end":48},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":57,"end":57},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":62,"end":62},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":67,"end":67},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":72,"end":72},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":77,"end":77},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":82,"end":82},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":87,"end":87},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":92,"end":92},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":97,"end":97},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":102,"end":102},"path":"packages/styles/src/accessories/_color-helpers.scss"},"type":"issue","engine_name":"fixme","fingerprint":"77058e9c51a5597e2870abc7dec64e86","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":7,"end":7},"path":"packages/styles/src/accessories/_divider-line.scss"},"type":"issue","engine_name":"fixme","fingerprint":"4cfc265eb003ce320da2c65f2bc4654f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/styles/src/accessories/_card.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d12d0329e014cc62da524a6a7ba662a4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":31,"end":31},"path":"packages/styles/src/accessories/_card.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d12d0329e014cc62da524a6a7ba662a4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":83,"end":83},"path":"packages/styles/src/accessories/_card.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d12d0329e014cc62da524a6a7ba662a4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":89,"end":89},"path":"packages/styles/src/accessories/_card.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d12d0329e014cc62da524a6a7ba662a4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":36,"end":36},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":58,"end":58},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":71,"end":71},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":78,"end":78},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":83,"end":83},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":88,"end":88},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":376,"end":376},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"54aac7a29bf31a60c73e97217c3a37e4","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":527,"end":527},"path":"packages/styles/src/accessories/_oocss.scss"},"type":"issue","engine_name":"fixme","fingerprint":"3babe1c3492919cde8c3b02cac686327","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":4,"end":4},"path":"packages/styles/src/accessories/_links.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c28fb990e1b9e5f0055be29b3c598058","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":10,"end":10},"path":"packages/styles/src/accessories/_links.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c28fb990e1b9e5f0055be29b3c598058","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":17,"end":17},"path":"packages/styles/src/accessories/_links.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c28fb990e1b9e5f0055be29b3c598058","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":25,"end":25},"path":"packages/styles/src/accessories/_links.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c28fb990e1b9e5f0055be29b3c598058","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/styles/src/accessories/_links.scss"},"type":"issue","engine_name":"fixme","fingerprint":"c28fb990e1b9e5f0055be29b3c598058","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":20,"end":20},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":24,"end":24},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":26,"end":26},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":43,"end":43},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":49,"end":49},"path":"packages/styles/src/accessories/_table.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7d61b933989259fb53532cb52e9c4f08","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":2,"end":2},"path":"packages/unordered-horizontal-list/UnorderedHorizontalListValidator.ts"},"type":"issue","engine_name":"fixme","fingerprint":"b1d6093f846ca2750dfab3660a41635f","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":40,"end":40},"path":"packages/unordered-horizontal-list/UnorderedHorizontalListInterface.ts"},"type":"issue","engine_name":"fixme","fingerprint":"60f06c674f1923c801075bc0d1e26f29","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":7,"end":7},"path":"packages/unordered-horizontal-list/unordered-horizontal-list.scss"},"type":"issue","engine_name":"fixme","fingerprint":"de56dc6956cde6d4c263ef2e7eb91e3d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":12,"end":12},"path":"packages/unordered-horizontal-list/unordered-horizontal-list.scss"},"type":"issue","engine_name":"fixme","fingerprint":"d78738a6f9f64b5ffc35728d0d8e250e","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":54,"end":54},"path":"packages/unordered-horizontal-list/UnorderedHorizontalList.ts"},"type":"issue","engine_name":"fixme","fingerprint":"3f6ed88f21a32afffe018544ca8a56b2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":23,"end":23},"path":"packages/unordered-horizontal-list/__tests__/UnorderedHorizontalListValidator.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"89572822ae60c8736e2433d88267da53","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":132,"end":132},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ad3e1327c6f2b6f01f57b83d7e70ce32","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":141,"end":141},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"02e3f190ab54992c5e766bba339941a2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":143,"end":143},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9d09f681b6d61f4b9a7f77d8a321edf1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":200,"end":200},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9d09f681b6d61f4b9a7f77d8a321edf1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":202,"end":202},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9d09f681b6d61f4b9a7f77d8a321edf1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":211,"end":211},"path":"packages/option-picker/option-picker.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9d09f681b6d61f4b9a7f77d8a321edf1","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/overlay/overlay.scss"},"type":"issue","engine_name":"fixme","fingerprint":"3ec893c1cf50103d1251d513ec537eda","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":48,"end":48},"path":"packages/overlay/overlay.scss"},"type":"issue","engine_name":"fixme","fingerprint":"3ec893c1cf50103d1251d513ec537eda","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":129,"end":129},"path":"packages/overlay/overlay.scss"},"type":"issue","engine_name":"fixme","fingerprint":"add022b9707ca7572ea8e617a4757c2b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":145,"end":145},"path":"packages/overlay/overlay.scss"},"type":"issue","engine_name":"fixme","fingerprint":"add022b9707ca7572ea8e617a4757c2b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":210,"end":210},"path":"packages/overlay/__tests__/Overlay.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"260e8e1ab8e553d30eca99c413bb1d07","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":248,"end":248},"path":"packages/overlay/__tests__/Overlay.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"260e8e1ab8e553d30eca99c413bb1d07","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":272,"end":272},"path":"packages/overlay/__tests__/Overlay.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"6556100f0946f1562243fac1c66728bc","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":295,"end":295},"path":"packages/overlay/__tests__/Overlay.test.ts"},"type":"issue","engine_name":"fixme","fingerprint":"6556100f0946f1562243fac1c66728bc","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":253,"end":253},"path":"packages/overlay/Overlay.ts"},"type":"issue","engine_name":"fixme","fingerprint":"8b94ce9a5bb963c0cddb2c04927600e9","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":21,"end":21},"path":"packages/icon-text/icon-text.scss"},"type":"issue","engine_name":"fixme","fingerprint":"ea5a8ea1e27afd1ee224a1094e067c1c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":37,"end":37},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":43,"end":43},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":45,"end":45},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":52,"end":52},"path":"packages/scaffold-example/scaffold-example.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1416c03a16545647fb067d8108219940","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":20,"end":20},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":22,"end":22},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":26,"end":26},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":28,"end":28},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":30,"end":30},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":35,"end":35},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":46,"end":46},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":55,"end":55},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"1513d7aaf2fb537f8a6919c559c11f51","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":58,"end":58},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"9ef0910a86d0260a40bacc876f9db846","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":75,"end":75},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"2f987e747da92eb4e5ba0c7e6496b422","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":81,"end":81},"path":"packages/interaction-bar/Interaction-bar.scss"},"type":"issue","engine_name":"fixme","fingerprint":"b346d7472ed722d0d1c39f0536caa129","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":2,"end":2},"path":"packages/interaction-bar/interactionBarShareViaClipboardService.ts"},"type":"issue","engine_name":"fixme","fingerprint":"a8aae652012edbbf165b62a6c1a2845b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":46,"end":46},"path":"packages/interaction-bar/InteractionBar.ts"},"type":"issue","engine_name":"fixme","fingerprint":"c2f2ec26d4282753e68c0994d31cf752","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":47,"end":47},"path":"packages/interaction-bar/InteractionBar.ts"},"type":"issue","engine_name":"fixme","fingerprint":"288f299ff8c40043467488958288ab24","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":2,"end":2},"path":"packages/interaction-bar/interactionBarShareViaMailService.ts"},"type":"issue","engine_name":"fixme","fingerprint":"64f06e074b68d9fdea594ace1f7a460c","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":17,"end":17},"path":"packages/interaction-bar/interactionBarShareViaMailService.ts"},"type":"issue","engine_name":"fixme","fingerprint":"0396312be9c5fc4e3d3d8024fe563d0d","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":20,"end":20},"path":"packages/basket-summary/basket-summary.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f5fef876e88be7b1b30c7b3743f305e2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":22,"end":22},"path":"packages/basket-summary/basket-summary.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f5fef876e88be7b1b30c7b3743f305e2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":33,"end":33},"path":"packages/basket-summary/basket-summary.scss"},"type":"issue","engine_name":"fixme","fingerprint":"f5fef876e88be7b1b30c7b3743f305e2","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":6,"end":6},"path":"packages/form-label/form-label.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7993be0de750b0c298fccd396816579b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":15,"end":15},"path":"packages/form-label/form-label.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7993be0de750b0c298fccd396816579b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":22,"end":22},"path":"packages/form-label/form-label.scss"},"type":"issue","engine_name":"fixme","fingerprint":"7993be0de750b0c298fccd396816579b","severity":"minor"},{"categories":["Bug Risk"],"check_name":"TODO","description":"TODO found","location":{"lines":{"begin":45,"end":45},"path":"prepare-container.sh"},"type":"issue","engine_name":"fixme","fingerprint":"719d27cc39757007ccb867394a1ddf71","severity":"minor"}]
